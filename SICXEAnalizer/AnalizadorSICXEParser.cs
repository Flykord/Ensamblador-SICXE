//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\danie\source\repos\AnalizadorSICXE\AnalizadorSICXE\AnalizadorSICXE.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace AnalizadorSICXE
{
    using Antlr4.Runtime;
    using Antlr4.Runtime.Atn;
    using Antlr4.Runtime.Misc;
    using Antlr4.Runtime.Tree;
    using SICXEAnalizer;
    using System;
    using System.Collections.Generic;
    using System.Text;
    using DFA = Antlr4.Runtime.Dfa.DFA;

    [System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
    [System.CLSCompliant(false)]
    public partial class AnalizadorSICXEParser : Parser
    {
        public int paso = 0;
        public List<string> errores = new List<string>();
        //public List<CSECT> seccs = new List<CSECT>();
        public List<string> tabsimb = new List<string>();
        public List<int> dirTabsim = new List<int>();
        public List<string> dirTabimHex = new List<string>();
        public List<string> format = new List<string>();
        public List<string> errorType = new List<string>();
        public List<int> contProg = new List<int>();
        public List<string> p1 = new List<string>();
        public List<string> probando = new List<string>();
        public List<string> mododir = new List<string>();
        public List<string> Errorespaso2 = new List<string>();
        bool enter = false;
        public string BASE = "0";
        int solounavez = 0;
        string[] nemonicos = { "ADD", "ADDF", "ADDR", "AND", "CLEAR", "COMP", "COMPF", "COMPR", "DIV", "DIVF", "DIVR", "FIX", "FLOAT", "HIO", "J", "JEQ", "JGT", "JLT", "JSUB", "LDA", "LDB", "LDCH", "LDF", "LDL", "LDS", "LDT", "LDX", "LPS", "MUL", "MULF", "MULR", "NORM", "OR", "RD", "RMO", "RSUB", "SHIFTL", "SHIFTR", "SIO", "SSK", "STA", "STB", "STCH", "STF", "STI", "STL", "STS", "STSW", "STT", "STX", "SUB", "SUBF", "SUBR", "SVC", "TD", "TIO", "TIX", "TIXR", "WD" };
        string[] CodOp = { "18", "58", "90", "40", "B4", "28", "88", "A0", "24", "64", "9C", "C4", "C0", "F4", "3C", "30", "34", "38", "48", "00", "68", "50", "70", "08", "6C", "74", "04", "D0", "20", "60", "98", "C8", "44", "D8", "AC", "4C", "A4", "A8", "F0", "EC", "0C", "78", "54", "80", "D4", "14", "7C", "E8", "84", "10", "1C", "5C", "94", "B0", "E0", "F8", "2C", "B8", "DC" };
        //string[] registros = { "A","X","L","B", "S" , "T" , "F" } ;
        public int A = 0;
        public int X = 1;
        public int L = 2;
        public int B = 3;
        public int S = 4;
        public int T = 5;
        public int F = 6;
        public int mr = 0;
        public int[] contador = new int[5];
        public string cphex;
        public List<string> conthex = new List<string>();
        public List<string> codobj = new List<string>();
        public int cp = 0;
        public int b = 0;
        public int format4 = 0;
        public int form4 = 0;
        List<int> lineas = new List<int>();
        public const int
        T__0 = 1, T__1 = 2, T__2 = 3, T__3 = 4, T__4 = 5, T__5 = 6, T__6 = 7, T__7 = 8, T__8 = 9,
        T__9 = 10, T__10 = 11, T__11 = 12, T__12 = 13, T__13 = 14, T__14 = 15, T__15 = 16, T__16 = 17,
        T__17 = 18, T__18 = 19, T__19 = 20, T__20 = 21, T__21 = 22, T__22 = 23, T__23 = 24,
        T__24 = 25, T__25 = 26, T__26 = 27, T__27 = 28, T__28 = 29, T__29 = 30, T__30 = 31,
        T__31 = 32, T__32 = 33, T__33 = 34, T__34 = 35, T__35 = 36, T__36 = 37, T__37 = 38,
        T__38 = 39, T__39 = 40, T__40 = 41, T__41 = 42, T__42 = 43, T__43 = 44, T__44 = 45,
        T__45 = 46, T__46 = 47, T__47 = 48, T__48 = 49, T__49 = 50, T__50 = 51, T__51 = 52,
        T__52 = 53, T__53 = 54, T__54 = 55, T__55 = 56, T__56 = 57, T__57 = 58, T__58 = 59,
        T__59 = 60, T__60 = 61, T__61 = 62, T__62 = 63, T__63 = 64, T__64 = 65, T__65 = 66,
        T__66 = 67, T__67 = 68, T__68 = 69, T__69 = 70, T__70 = 71, T__71 = 72, T__72 = 73,
        T__73 = 74, T__74 = 75, T__75 = 76, NUM = 77, CONSTHEX = 78, CONSTCAD = 79, ID = 80,
        FINL = 81, WS = 82;
        public const int
            RULE_programa = 0, RULE_inicio = 1, RULE_etiqueta = 2, RULE_fin = 3, RULE_entrada = 4,
            RULE_proposiciones = 5, RULE_proposiciones1 = 6, RULE_proposicion = 7,
            RULE_instruccion = 8, RULE_directiva = 9, RULE_tipodirectiva = 10, RULE_base = 11,
            RULE_opdirectiva = 12, RULE_opinstruccion = 13, RULE_formato = 14, RULE_f1 = 15,
            RULE_f2 = 16, RULE_f3 = 17, RULE_f4 = 18, RULE_simple3 = 19, RULE_indirecto3 = 20,
            RULE_inmediato3 = 21, RULE_subf2a = 22, RULE_subf2b = 23, RULE_subf2c = 24,
            RULE_subf2d = 25, RULE_codop1 = 26, RULE_codop2 = 27, RULE_codop3 = 28,
            RULE_reg = 29;
        public static readonly string[] ruleNames = {
        "programa", "inicio", "etiqueta", "fin", "entrada", "proposiciones", "proposiciones1",
        "proposicion", "instruccion", "directiva", "tipodirectiva", "base", "opdirectiva",
        "opinstruccion", "formato", "f1", "f2", "f3", "f4", "simple3", "indirecto3",
        "inmediato3", "subf2a", "subf2b", "subf2c", "subf2d", "codop1", "codop2",
        "codop3", "reg"
    };

        private static readonly string[] _LiteralNames = {
        null, "'START'", "'END'", "'BYTE'", "'WORD'", "'RESB'", "'RESW'", "'BASE'",
        "'+'", "','", "'X'", "'@'", "'#'", "'SHIFTL'", "'SHIFTR'", "'CLEAR'",
        "'TIXR'", "'SVC'", "'FIX'", "'FLOAT'", "'HIO'", "'NORM'", "'SIO'", "'TIO'",
        "'ADDR'", "'SUBR'", "'COMPR'", "'DIVR'", "'MULR'", "'RMO'", "'ADD'", "'ADDF'",
        "'AND'", "'COMP'", "'COMPF'", "'DIV'", "'DIVF'", "'J'", "'JEQ'", "'JGT'",
        "'JLT'", "'JSUB'", "'LDA'", "'LDB'", "'LDCH'", "'LDF'", "'LDL'", "'LDS'",
        "'LDX'", "'LPS'", "'MUL'", "'MULF'", "'OR'", "'RD'", "'RSUB'", "'SSK'",
        "'STA'", "'STB'", "'STCH'", "'STF'", "'STI'", "'STL'", "'STS'", "'STSW'",
        "'STT'", "'STX'", "'SUB'", "'SUBF'", "'TD'", "'TIX'", "'WD'", "'A'", "'L'",
        "'B'", "'S'", "'T'", "'F'"
    };
        private static readonly string[] _SymbolicNames = {
        null, null, null, null, null, null, null, null, null, null, null, null,
        null, null, null, null, null, null, null, null, null, null, null, null,
        null, null, null, null, null, null, null, null, null, null, null, null,
        null, null, null, null, null, null, null, null, null, null, null, null,
        null, null, null, null, null, null, null, null, null, null, null, null,
        null, null, null, null, null, null, null, null, null, null, null, null,
        null, null, null, null, null, "NUM", "CONSTHEX", "CONSTCAD", "ID", "FINL",
        "WS"
    };
        public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

        [System.Obsolete("Use Vocabulary instead.")]
        public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

        private static string[] GenerateTokenNames(IVocabulary vocabulary, int length)
        {
            string[] tokenNames = new string[length];
            for (int i = 0; i < tokenNames.Length; i++)
            {
                tokenNames[i] = vocabulary.GetLiteralName(i);
                if (tokenNames[i] == null)
                {
                    tokenNames[i] = vocabulary.GetSymbolicName(i);
                }

                if (tokenNames[i] == null)
                {
                    tokenNames[i] = "<INVALID>";
                }
            }

            return tokenNames;
        }

        [System.Obsolete("Use IRecognizer.Vocabulary instead.")]
        public override string[] TokenNames
        {
            get
            {
                return tokenNames;
            }
        }

        [NotNull]
        public override IVocabulary Vocabulary
        {
            get
            {
                return DefaultVocabulary;
            }
        }

        public override string GrammarFileName { get { return "AnalizadorSICXE.g4"; } }

        public override string[] RuleNames { get { return ruleNames; } }

        public override string SerializedAtn { get { return _serializedATN; } }

        public AnalizadorSICXEParser(ITokenStream input)
            : base(input)
        {
            _interp = new ParserATNSimulator(this, _ATN);
        }
        public partial class ProgramaContext : ParserRuleContext
        {
            public InicioContext inicio()
            {
                return GetRuleContext<InicioContext>(0);
            }
            public ProposicionesContext proposiciones()
            {
                return GetRuleContext<ProposicionesContext>(0);
            }
            public FinContext fin()
            {
                return GetRuleContext<FinContext>(0);
            }
            public ITerminalNode Eof() { return GetToken(AnalizadorSICXEParser.Eof, 0); }
            public ProgramaContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_programa; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IAnalizadorSICXEListener typedListener = listener as IAnalizadorSICXEListener;
                if (typedListener != null) typedListener.EnterPrograma(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IAnalizadorSICXEListener typedListener = listener as IAnalizadorSICXEListener;
                if (typedListener != null) typedListener.ExitPrograma(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IAnalizadorSICXEVisitor<TResult> typedVisitor = visitor as IAnalizadorSICXEVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitPrograma(this);
                else return visitor.VisitChildren(this);
            }
        }

        
        [RuleVersion(0)]
        public ProgramaContext programa()
        {
            ProgramaContext _localctx = new ProgramaContext(_ctx, State);
            EnterRule(_localctx, 0, RULE_programa);
            try
            {
                // cp = cp + 0;
                //contProg.Add(cp);
                EnterOuterAlt(_localctx, 1);
                {
                    State = 60; inicio();
                    State = 61; proposiciones();
                    State = 62; fin();
                    State = 63; Match(Eof);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
                if (paso == 1)
                {
                    if (errores.Count > 0)
                    {
                        int c = 0;
                        foreach (int a in lineas)
                        {
                            if (a == re.OffendingToken.Line)
                            {
                                c = 1;
                            }
                        }
                        if (c == 0)
                        {
                            errores.Add("Error en linea :" + re.OffendingToken.Line + " , " + re.OffendingToken.Text);
                            lineas.Add(re.OffendingToken.Line);
                            contProg.Add(cp);
                            //conthex.Add(cp.ToString("X"));
                            format.Add("Error");
                            mododir.Add("----");
                        }

                    }
                    else
                    {
                        errores.Add("Error en linea :" + re.OffendingToken.Line + " , " + re.OffendingToken.Text);
                        contProg.Add(cp);
                        conthex.Add(cp.ToString("X"));
                        lineas.Add(re.OffendingToken.Line);
                        format.Add("Error");
                        mododir.Add("----");
                    }
                }
                if (paso == 2)
                {

                    if (b == 0)
                    {
                        probando.Add("----");
                        b = re.OffendingToken.Line;
                    }
                    else
                    {
                        if (b == re.OffendingToken.Line)
                        {
                            b = 0;
                        }
                    }

                }
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class InicioContext : ParserRuleContext
        {
            public EtiquetaContext etiqueta()
            {
                return GetRuleContext<EtiquetaContext>(0);
            }
            public ITerminalNode NUM() { return GetToken(AnalizadorSICXEParser.NUM, 0); }
            public ITerminalNode FINL() { return GetToken(AnalizadorSICXEParser.FINL, 0); }
            public ProposicionContext proposicion()
            {
                return GetRuleContext<ProposicionContext>(0);
            }
            public InicioContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_inicio; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IAnalizadorSICXEListener typedListener = listener as IAnalizadorSICXEListener;
                if (typedListener != null) typedListener.EnterInicio(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IAnalizadorSICXEListener typedListener = listener as IAnalizadorSICXEListener;
                if (typedListener != null) typedListener.ExitInicio(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IAnalizadorSICXEVisitor<TResult> typedVisitor = visitor as IAnalizadorSICXEVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitInicio(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public InicioContext inicio()
        {
            InicioContext _localctx = new InicioContext(_ctx, State);
            EnterRule(_localctx, 2, RULE_inicio);
            try
            {
                if (paso == 1)
                {
                    format.Add("----");
                    mododir.Add("----");
                    contProg.Add(cp);
                    // conthex.Add(cp.ToString("X"));
                    cp += 0;
                }
                if (paso == 2)
                {
                    probando.Add("----");

                }



                State = 71;
                _errHandler.Sync(this);
                switch (Interpreter.AdaptivePredict(_input, 0, _ctx))
                {
                    case 1:
                        EnterOuterAlt(_localctx, 1);
                        {
                            State = 65; etiqueta();
                            State = 66; Match(T__0);
                            State = 67; Match(NUM);
                            State = 68; Match(FINL);
                        }
                        break;

                    case 2:
                        EnterOuterAlt(_localctx, 2);
                        {
                            State = 70; proposicion();
                        }
                        break;
                }
            }
            catch (RecognitionException re)
            {
                mr = 1;
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
                if (paso == 1)
                {
                    if (errores.Count > 0)
                    {
                        int c = 0;
                        foreach (int a in lineas)
                        {
                            if (a == re.OffendingToken.Line)
                            {
                                c = 1;
                            }
                        }
                        if (c == 0)
                        {
                            errores.Add("Error en linea :" + re.OffendingToken.Line + " , " + re.OffendingToken.Text);
                            contProg.Add(cp);
                            conthex.Add(cp.ToString("X"));
                            lineas.Add(re.OffendingToken.Line);
                            format.Add("Error");
                            mododir.Add("----");
                        }

                    }
                    else
                    {
                        errores.Add("Error en linea :" + re.OffendingToken.Line + " , " + re.OffendingToken.Text);
                        contProg.Add(cp);
                        conthex.Add(cp.ToString("X"));
                        lineas.Add(re.OffendingToken.Line);
                        format.Add("Error");
                        mododir.Add("----");
                    }
                }
                if (paso == 2)
                {

                    if (b == 0)
                    {
                        probando.Add("----");
                        b = re.OffendingToken.Line;
                    }
                    else
                    {
                        if (b == re.OffendingToken.Line)
                        {
                            b = 0;
                        }
                    }

                }
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class EtiquetaContext : ParserRuleContext
        {
            public ITerminalNode ID() { return GetToken(AnalizadorSICXEParser.ID, 0); }
            public EtiquetaContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_etiqueta; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IAnalizadorSICXEListener typedListener = listener as IAnalizadorSICXEListener;
                if (typedListener != null) typedListener.EnterEtiqueta(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IAnalizadorSICXEListener typedListener = listener as IAnalizadorSICXEListener;
                if (typedListener != null) typedListener.ExitEtiqueta(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IAnalizadorSICXEVisitor<TResult> typedVisitor = visitor as IAnalizadorSICXEVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitEtiqueta(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public EtiquetaContext etiqueta()
        {
            EtiquetaContext _localctx = new EtiquetaContext(_ctx, State);
            EnterRule(_localctx, 4, RULE_etiqueta);
            try
            {

                int simbolduplicated = 0;
                State = 75;
                _errHandler.Sync(this);
                switch (_input.La(1))
                {
                    case ID:
                        //Agregar etiqueta a TABSIM _input.Lt(1).Text es el dato considerado etiqueta
                        if (paso == 1)
                        {
                            if (tabsimb.Count > 0)
                            {
                                bool rep = tabsimb.Contains(_input.Lt(1).Text);
                                if (rep)
                                {
                                    errores.Add("Error simbolo" + "  " + _input.Lt(1).Text + " duplicado");
                                    simbolduplicated = 1;
                                }
                                else
                                {
                                    tabsimb.Add(_input.Lt(1).Text);
                                    dirTabsim.Add(cp);
                                    dirTabimHex.Add(cp.ToString("X"));
                                    //conthex.Add(cp.ToString("X"));
                                    contProg.Add(cp);

                                }
                            }
                            else
                            {
                                tabsimb.Add(_input.Lt(1).Text);
                                dirTabsim.Add(cp);
                                dirTabimHex.Add(cp.ToString("X"));
                                contProg.Add(cp);
                                conthex.Add(cp.ToString("X"));
                            }
                        }
                        EnterOuterAlt(_localctx, 1);
                        {
                            State = 73; Match(ID);
                        }
                        break;
                    case T__0:
                    case T__2:
                    case T__3:
                    case T__4:
                    case T__5:
                    case T__6:
                    case T__7:
                    case T__12:
                    case T__13:
                    case T__14:
                    case T__15:
                    case T__16:
                    case T__17:
                    case T__18:
                    case T__19:
                    case T__20:
                    case T__21:
                    case T__22:
                    case T__23:
                    case T__24:
                    case T__25:
                    case T__26:
                    case T__27:
                    case T__28:
                    case T__29:
                    case T__30:
                    case T__31:
                    case T__32:
                    case T__33:
                    case T__34:
                    case T__35:
                    case T__36:
                    case T__37:
                    case T__38:
                    case T__39:
                    case T__40:
                    case T__41:
                    case T__42:
                    case T__43:
                    case T__44:
                    case T__45:
                    case T__46:
                    case T__47:
                    case T__48:
                    case T__49:
                    case T__50:
                    case T__51:
                    case T__52:
                    case T__53:
                    case T__54:
                    case T__55:
                    case T__56:
                    case T__57:
                    case T__58:
                    case T__59:
                    case T__60:
                    case T__61:
                    case T__62:
                    case T__63:
                    case T__64:
                    case T__65:
                    case T__66:
                    case T__67:
                    case T__68:
                    case T__69:
                    case FINL:
                        EnterOuterAlt(_localctx, 2);
                        {
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
                if (paso == 1)
                {
                    if (errores.Count > 0)
                    {
                        int c = 0;
                        foreach (int a in lineas)
                        {
                            if (a == re.OffendingToken.Line)
                            {
                                c = 1;
                            }
                        }
                        if (c == 0)
                        {
                            errores.Add("Error en linea :" + re.OffendingToken.Line + " , " + re.OffendingToken.Text);
                            lineas.Add(re.OffendingToken.Line);
                            contProg.Add(cp);
                            conthex.Add(cp.ToString("X"));
                            format.Add("Error");
                            mododir.Add("----");
                        }

                    }
                    else
                    {
                        errores.Add("Error en linea :" + re.OffendingToken.Line + " , " + re.OffendingToken.Text);
                        contProg.Add(cp);
                        conthex.Add(cp.ToString("X"));
                        lineas.Add(re.OffendingToken.Line);
                        format.Add("Error");
                        mododir.Add("----");
                    }
                }
                if (paso == 2)
                {

                    if (b == 0)
                    {
                        probando.Add("----");
                        b = re.OffendingToken.Line;
                    }
                    else
                    {
                        if (b == re.OffendingToken.Line)
                        {
                            b = 0;
                        }
                    }

                }
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class FinContext : ParserRuleContext
        {
            public EntradaContext entrada()
            {
                return GetRuleContext<EntradaContext>(0);
            }
            public ITerminalNode FINL() { return GetToken(AnalizadorSICXEParser.FINL, 0); }
            public FinContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_fin; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IAnalizadorSICXEListener typedListener = listener as IAnalizadorSICXEListener;
                if (typedListener != null) typedListener.EnterFin(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IAnalizadorSICXEListener typedListener = listener as IAnalizadorSICXEListener;
                if (typedListener != null) typedListener.ExitFin(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IAnalizadorSICXEVisitor<TResult> typedVisitor = visitor as IAnalizadorSICXEVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitFin(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public FinContext fin()
        {
            FinContext _localctx = new FinContext(_ctx, State);
            EnterRule(_localctx, 6, RULE_fin);
            try
            {
                if (paso == 1)
                {
                    mododir.Add("----");
                    format.Add("----");
                    conthex.Add(cp.ToString("X"));
                    contProg.Add(cp);
                }
                if (paso == 2)
                {
                    probando.Add("----");
                }



                State = 83;
                _errHandler.Sync(this);
                switch (Interpreter.AdaptivePredict(_input, 2, _ctx))
                {
                    case 1:
                        EnterOuterAlt(_localctx, 1);
                        {
                            State = 77; Match(T__1);
                            State = 78; entrada();
                            State = 79; Match(FINL);
                        }
                        break;

                    case 2:
                        EnterOuterAlt(_localctx, 2);
                        {
                            State = 81; Match(T__1);
                            State = 82; entrada();
                        }
                        break;
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
                if (paso == 1)
                {
                    if (errores.Count > 0)
                    {
                        int c = 0;
                        foreach (int a in lineas)
                        {
                            if (a == re.OffendingToken.Line)
                            {
                                c = 1;
                            }
                        }
                        if (c == 0)
                        {
                            errores.Add("Error en linea :" + re.OffendingToken.Line + " , " + re.OffendingToken.Text);
                            lineas.Add(re.OffendingToken.Line);
                            contProg.Add(cp);
                            conthex.Add(cp.ToString("X"));
                            format.Add("Error");
                            mododir.Add("----");
                        }

                    }
                    else
                    {
                        errores.Add("Error en linea :" + re.OffendingToken.Line + " , " + re.OffendingToken.Text);
                        contProg.Add(cp);
                        conthex.Add(cp.ToString("X"));
                        lineas.Add(re.OffendingToken.Line);
                        format.Add("Error");
                        mododir.Add("----");
                    }
                }
                if (paso == 2)
                {

                    if (b == 0)
                    {
                        probando.Add("----");
                        b = re.OffendingToken.Line;
                    }
                    else
                    {
                        if (b == re.OffendingToken.Line)
                        {
                            b = 0;
                        }
                    }

                }
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class EntradaContext : ParserRuleContext
        {
            public ITerminalNode ID() { return GetToken(AnalizadorSICXEParser.ID, 0); }
            public EntradaContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_entrada; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IAnalizadorSICXEListener typedListener = listener as IAnalizadorSICXEListener;
                if (typedListener != null) typedListener.EnterEntrada(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IAnalizadorSICXEListener typedListener = listener as IAnalizadorSICXEListener;
                if (typedListener != null) typedListener.ExitEntrada(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IAnalizadorSICXEVisitor<TResult> typedVisitor = visitor as IAnalizadorSICXEVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitEntrada(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public EntradaContext entrada()
        {
            EntradaContext _localctx = new EntradaContext(_ctx, State);
            EnterRule(_localctx, 8, RULE_entrada);
            try
            {
                State = 87;
                _errHandler.Sync(this);
                switch (_input.La(1))
                {
                    case ID:
                        EnterOuterAlt(_localctx, 1);
                        {
                            State = 85; Match(ID);
                        }
                        break;
                    case Eof:
                    case FINL:
                        EnterOuterAlt(_localctx, 2);
                        {
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
                if (paso == 1)
                {
                    if (errores.Count > 0)
                    {
                        int c = 0;
                        foreach (int a in lineas)
                        {
                            if (a == re.OffendingToken.Line)
                            {
                                c = 1;
                            }
                        }
                        if (c == 0)
                        {
                            errores.Add("Error en linea :" + re.OffendingToken.Line + " , " + re.OffendingToken.Text);
                            lineas.Add(re.OffendingToken.Line);
                            contProg.Add(cp);
                            conthex.Add(cp.ToString("X"));
                            format.Add("Error");
                            mododir.Add("----");
                        }

                    }
                    else
                    {
                        errores.Add("Error en linea :" + re.OffendingToken.Line + " , " + re.OffendingToken.Text);
                        contProg.Add(cp);
                        conthex.Add(cp.ToString("X"));
                        lineas.Add(re.OffendingToken.Line);
                        format.Add("Error");
                        mododir.Add("----");
                    }
                }
                if (paso == 2)
                {

                    if (b == 0)
                    {
                        probando.Add("----");
                        b = re.OffendingToken.Line;
                    }
                    else
                    {
                        if (b == re.OffendingToken.Line)
                        {
                            b = 0;
                        }
                    }

                }
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ProposicionesContext : ParserRuleContext
        {
            public ProposicionContext proposicion()
            {
                return GetRuleContext<ProposicionContext>(0);
            }
            public Proposiciones1Context proposiciones1()
            {
                return GetRuleContext<Proposiciones1Context>(0);
            }
            public ProposicionesContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_proposiciones; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IAnalizadorSICXEListener typedListener = listener as IAnalizadorSICXEListener;
                if (typedListener != null) typedListener.EnterProposiciones(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IAnalizadorSICXEListener typedListener = listener as IAnalizadorSICXEListener;
                if (typedListener != null) typedListener.ExitProposiciones(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IAnalizadorSICXEVisitor<TResult> typedVisitor = visitor as IAnalizadorSICXEVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitProposiciones(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ProposicionesContext proposiciones()
        {
            ProposicionesContext _localctx = new ProposicionesContext(_ctx, State);
            EnterRule(_localctx, 10, RULE_proposiciones);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 89; proposicion();
                    State = 90; proposiciones1();
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
                if (paso == 1)
                {
                    if (errores.Count > 0)
                    {
                        int c = 0;
                        foreach (int a in lineas)
                        {
                            if (a == re.OffendingToken.Line)
                            {
                                c = 1;
                            }
                        }
                        if (c == 0)
                        {
                            errores.Add("Error en linea :" + re.OffendingToken.Line + " , " + re.OffendingToken.Text);
                            lineas.Add(re.OffendingToken.Line);
                            contProg.Add(cp);
                            conthex.Add(cp.ToString("X"));
                            format.Add("Error");
                            mododir.Add("----");
                        }

                    }
                    else
                    {
                        errores.Add("Error en linea :" + re.OffendingToken.Line + " , " + re.OffendingToken.Text);
                        contProg.Add(cp);
                        conthex.Add(cp.ToString("X"));
                        lineas.Add(re.OffendingToken.Line);
                        format.Add("Error");
                        mododir.Add("----");
                    }
                }
                if (paso == 2)
                {

                    if (b == 0)
                    {
                        probando.Add("----");
                        b = re.OffendingToken.Line;
                    }
                    else
                    {
                        if (b == re.OffendingToken.Line)
                        {
                            b = 0;
                        }
                    }

                }
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class Proposiciones1Context : ParserRuleContext
        {
            public ProposicionContext proposicion()
            {
                return GetRuleContext<ProposicionContext>(0);
            }
            public Proposiciones1Context proposiciones1()
            {
                return GetRuleContext<Proposiciones1Context>(0);
            }
            public Proposiciones1Context(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_proposiciones1; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IAnalizadorSICXEListener typedListener = listener as IAnalizadorSICXEListener;
                if (typedListener != null) typedListener.EnterProposiciones1(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IAnalizadorSICXEListener typedListener = listener as IAnalizadorSICXEListener;
                if (typedListener != null) typedListener.ExitProposiciones1(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IAnalizadorSICXEVisitor<TResult> typedVisitor = visitor as IAnalizadorSICXEVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitProposiciones1(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public Proposiciones1Context proposiciones1()
        {
            Proposiciones1Context _localctx = new Proposiciones1Context(_ctx, State);
            EnterRule(_localctx, 12, RULE_proposiciones1);
            try
            {
                State = 96;
                _errHandler.Sync(this);
                switch (_input.La(1))
                {
                    case T__0:
                    case T__2:
                    case T__3:
                    case T__4:
                    case T__5:
                    case T__6:
                    case T__7:
                    case T__12:
                    case T__13:
                    case T__14:
                    case T__15:
                    case T__16:
                    case T__17:
                    case T__18:
                    case T__19:
                    case T__20:
                    case T__21:
                    case T__22:
                    case T__23:
                    case T__24:
                    case T__25:
                    case T__26:
                    case T__27:
                    case T__28:
                    case T__29:
                    case T__30:
                    case T__31:
                    case T__32:
                    case T__33:
                    case T__34:
                    case T__35:
                    case T__36:
                    case T__37:
                    case T__38:
                    case T__39:
                    case T__40:
                    case T__41:
                    case T__42:
                    case T__43:
                    case T__44:
                    case T__45:
                    case T__46:
                    case T__47:
                    case T__48:
                    case T__49:
                    case T__50:
                    case T__51:
                    case T__52:
                    case T__53:
                    case T__54:
                    case T__55:
                    case T__56:
                    case T__57:
                    case T__58:
                    case T__59:
                    case T__60:
                    case T__61:
                    case T__62:
                    case T__63:
                    case T__64:
                    case T__65:
                    case T__66:
                    case T__67:
                    case T__68:
                    case T__69:
                    case ID:
                    case FINL:
                        EnterOuterAlt(_localctx, 1);
                        {
                            State = 92; proposicion();
                            State = 93; proposiciones1();
                        }
                        break;
                    case T__1:
                        EnterOuterAlt(_localctx, 2);
                        {
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
                if (paso == 1)
                {
                    if (errores.Count > 0)
                    {
                        int c = 0;
                        foreach (int a in lineas)
                        {
                            if (a == re.OffendingToken.Line)
                            {
                                c = 1;
                            }
                        }
                        if (c == 0)
                        {
                            errores.Add("Error en linea :" + re.OffendingToken.Line + " , " + re.OffendingToken.Text);
                            lineas.Add(re.OffendingToken.Line);
                            contProg.Add(cp);
                            conthex.Add(cp.ToString("X"));
                            format.Add("Error");
                            mododir.Add("----");
                        }

                    }
                    else
                    {
                        errores.Add("Error en linea :" + re.OffendingToken.Line + " , " + re.OffendingToken.Text);
                        contProg.Add(cp);
                        conthex.Add(cp.ToString("X"));
                        lineas.Add(re.OffendingToken.Line);
                        format.Add("Error");
                        mododir.Add("----");
                    }
                }
                if (paso == 2)
                {
                    probando.Add("----");
                }
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ProposicionContext : ParserRuleContext
        {
            public InstruccionContext instruccion()
            {
                return GetRuleContext<InstruccionContext>(0);
            }
            public DirectivaContext directiva()
            {
                return GetRuleContext<DirectivaContext>(0);
            }
            public ProposicionContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_proposicion; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IAnalizadorSICXEListener typedListener = listener as IAnalizadorSICXEListener;
                if (typedListener != null) typedListener.EnterProposicion(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IAnalizadorSICXEListener typedListener = listener as IAnalizadorSICXEListener;
                if (typedListener != null) typedListener.ExitProposicion(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IAnalizadorSICXEVisitor<TResult> typedVisitor = visitor as IAnalizadorSICXEVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitProposicion(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ProposicionContext proposicion()
        {
            ProposicionContext _localctx = new ProposicionContext(_ctx, State);
            int ct = 0;
            EnterRule(_localctx, 14, RULE_proposicion);
            try
            {
                State = 100;
                _errHandler.Sync(this);
                switch (Interpreter.AdaptivePredict(_input, 5, _ctx))
                {
                    case 1:
                        EnterOuterAlt(_localctx, 1);
                        {
                            State = 98; instruccion();
                        }
                        break;

                    case 2:
                        EnterOuterAlt(_localctx, 2);
                        {
                            State = 99; directiva();
                        }
                        break;
                }
            }
            catch (RecognitionException re)
            {

                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);

                if (paso == 1)
                {
                    if (errores.Count > 0)
                    {
                        int c = 0;
                        foreach (int a in lineas)
                        {
                            if (a == re.OffendingToken.Line)
                            {
                                c = 1;
                            }
                        }
                        if (c == 0)
                        {
                            //Proposicion considerando errores
                            errores.Add("Error en linea ++:" + re.OffendingToken.Line + " , " + re.OffendingToken.Text);
                            conthex.Add(cp.ToString("X"));
                            contProg.Add(cp);
                            mododir.Add("----");
                            format.Add("Error la instruccion no existe");

                            lineas.Add(re.OffendingToken.Line);

                        }

                    }
                    else
                    {
                        errores.Add("Error en linea ++:" + re.OffendingToken.Line + " , " + re.OffendingToken.Text);
                        //errores.Add("Direccionamiento simple no encontrado");
                        mododir.Add("----");
                        format.Add("Error la instruccion no existe");
                        conthex.Add(cp.ToString("X"));
                        contProg.Add(cp);

                        lineas.Add(re.OffendingToken.Line);
                    }
                }
                if (paso == 2)
                {

                    if (b == 0)
                    {
                        probando.Add("----");
                        b = re.OffendingToken.Line;
                    }
                    else
                    {
                        if (b == re.OffendingToken.Line)
                        {
                            b = 0;
                        }
                    }

                }
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class InstruccionContext : ParserRuleContext
        {
            public EtiquetaContext etiqueta()
            {
                return GetRuleContext<EtiquetaContext>(0);
            }
            public OpinstruccionContext opinstruccion()
            {
                return GetRuleContext<OpinstruccionContext>(0);
            }
            public ITerminalNode FINL() { return GetToken(AnalizadorSICXEParser.FINL, 0); }
            public InstruccionContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_instruccion; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IAnalizadorSICXEListener typedListener = listener as IAnalizadorSICXEListener;
                if (typedListener != null) typedListener.EnterInstruccion(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IAnalizadorSICXEListener typedListener = listener as IAnalizadorSICXEListener;
                if (typedListener != null) typedListener.ExitInstruccion(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IAnalizadorSICXEVisitor<TResult> typedVisitor = visitor as IAnalizadorSICXEVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitInstruccion(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public InstruccionContext instruccion()
        {
            InstruccionContext _localctx = new InstruccionContext(_ctx, State);
            EnterRule(_localctx, 16, RULE_instruccion);
            try
            {
                int m = 0;
                EnterOuterAlt(_localctx, 1);
                {
                    State = 102; etiqueta();
                    State = 103; opinstruccion();
                    State = 104; Match(FINL);

                }
                for (int i = 0; i < nemonicos.Length; i++)
                {
                    if (nemonicos[i] == _input.Lt(1).Text)
                    {
                        m = i;
                        for (int j = 0; j < tabsimb.Count; j++)
                        {
                            if (_input.Lt(2).Text == tabsimb[j])
                            {
                                //probando.Add(_input.Lt(1).Text + CodOp[m] + "\t " + _input.Lt(2).Text + " "  );
                            }
                        }

                    }

                }


            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
                if (paso == 1)
                {
                    if (errores.Count > 0)
                    {
                        int c = 0;
                        foreach (int a in lineas)
                        {
                            if (a == re.OffendingToken.Line)
                            {
                                c = 1;
                            }
                        }
                        if (c == 0)
                        {
                            errores.Add("Error en linea :" + re.OffendingToken.Line + " , " + re.OffendingToken.Text);
                            contProg.Add(cp);
                            conthex.Add(cp.ToString("X"));
                            lineas.Add(re.OffendingToken.Line);
                            format.Add("Error");
                            mododir.Add("----");
                        }

                    }
                    else
                    {
                        errores.Add("Error en linea :" + re.OffendingToken.Line + " , " + re.OffendingToken.Text);
                        contProg.Add(cp);
                        conthex.Add(cp.ToString("X"));
                        lineas.Add(re.OffendingToken.Line);
                        format.Add("Error");
                        mododir.Add("----");
                    }
                }
                if (paso == 2)
                {
                    probando.Add("----");
                }
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class DirectivaContext : ParserRuleContext
        {
            public EtiquetaContext etiqueta()
            {
                return GetRuleContext<EtiquetaContext>(0);
            }
            public TipodirectivaContext tipodirectiva()
            {
                return GetRuleContext<TipodirectivaContext>(0);
            }
            public ITerminalNode NUM() { return GetToken(AnalizadorSICXEParser.NUM, 0); }
            public ITerminalNode FINL() { return GetToken(AnalizadorSICXEParser.FINL, 0); }
            public BaseContext @base()
            {
                return GetRuleContext<BaseContext>(0);
            }
            public OpdirectivaContext opdirectiva()
            {
                return GetRuleContext<OpdirectivaContext>(0);
            }
            public DirectivaContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_directiva; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IAnalizadorSICXEListener typedListener = listener as IAnalizadorSICXEListener;
                if (typedListener != null) typedListener.EnterDirectiva(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IAnalizadorSICXEListener typedListener = listener as IAnalizadorSICXEListener;
                if (typedListener != null) typedListener.ExitDirectiva(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IAnalizadorSICXEVisitor<TResult> typedVisitor = visitor as IAnalizadorSICXEVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitDirectiva(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public DirectivaContext directiva()
        {
            DirectivaContext _localctx = new DirectivaContext(_ctx, State);
            EnterRule(_localctx, 18, RULE_directiva);
            try
            {

                State = 120;
                _errHandler.Sync(this);
                switch (Interpreter.AdaptivePredict(_input, 6, _ctx))
                {
                    case 1:
                        EnterOuterAlt(_localctx, 1);
                        {
                            State = 106; etiqueta();
                            State = 107; tipodirectiva();
                            State = 108; Match(NUM);
                            State = 109; Match(FINL);
                        }
                        break;

                    case 2:
                        EnterOuterAlt(_localctx, 2);
                        {
                            State = 111; etiqueta();
                            State = 112; @base();
                            State = 113; Match(FINL);
                        }
                        break;

                    case 3:
                        EnterOuterAlt(_localctx, 3);
                        {
                            State = 115; etiqueta();
                            State = 116; Match(T__2);
                            State = 117; opdirectiva();
                            State = 118; Match(FINL);
                        }
                        break;
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
                if (paso == 1)
                {
                    if (errores.Count > 0)
                    {
                        int c = 0;
                        foreach (int a in lineas)
                        {
                            if (a == re.OffendingToken.Line)
                            {
                                c = 1;
                            }
                        }
                        if (c == 0)
                        {
                            errores.Add("Error en linea :" + re.OffendingToken.Line + " , " + re.OffendingToken.Text);
                            lineas.Add(re.OffendingToken.Line);
                            contProg.Add(cp);
                            conthex.Add(cp.ToString("X"));
                            format.Add("Error");
                            mododir.Add("----");
                        }

                    }
                    else
                    {
                        errores.Add("Error en linea :" + re.OffendingToken.Line + " , " + re.OffendingToken.Text);
                        lineas.Add(re.OffendingToken.Line);
                        contProg.Add(cp);
                        conthex.Add(cp.ToString("X"));
                        format.Add("Error");
                        mododir.Add("----");
                    }
                }
                if (paso == 2)
                {

                    if (b == 0)
                    {
                        probando.Add("----");
                        b = re.OffendingToken.Line;
                    }
                    else
                    {
                        if (b == re.OffendingToken.Line)
                        {
                            b = 0;
                        }
                    }

                }
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class TipodirectivaContext : ParserRuleContext
        {
            public TipodirectivaContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_tipodirectiva; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IAnalizadorSICXEListener typedListener = listener as IAnalizadorSICXEListener;
                if (typedListener != null) typedListener.EnterTipodirectiva(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IAnalizadorSICXEListener typedListener = listener as IAnalizadorSICXEListener;
                if (typedListener != null) typedListener.ExitTipodirectiva(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IAnalizadorSICXEVisitor<TResult> typedVisitor = visitor as IAnalizadorSICXEVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitTipodirectiva(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public TipodirectivaContext tipodirectiva()
        {
            TipodirectivaContext _localctx = new TipodirectivaContext(_ctx, State);
            EnterRule(_localctx, 20, RULE_tipodirectiva);
            int _la;
            try
            {
                if (paso == 1)
                {
                    mododir.Add("----");
                }

                EnterOuterAlt(_localctx, 1);
                {
                    State = 122;
                    _la = _input.La(1);
                    //errores.Add(_input.Lt(1).Text);
                    if (_input.Lt(1).Text == "RESW")
                    {
                        if (paso == 1)
                        {
                            format.Add("----");
                        }
                        if (paso == 2)
                        {
                            probando.Add("----");
                        }

                        int tt, ax;
                        if (_input.Lt(2).Text.Contains("H"))
                        {
                            string[] val = _input.Lt(2).Text.Split('H');
                            if (paso == 1)
                            {
                                ax = Convert.ToInt32(val[0], 16);
                                ax = ax * 3;
                                contProg.Add(cp);
                                conthex.Add(cp.ToString("X"));
                                cp = cp + ax;
                            }

                        }
                        else
                        {
                            if (paso == 1)
                            {
                                tt = int.Parse(_input.Lt(2).Text);
                                contProg.Add(cp);
                                conthex.Add(cp.ToString("X"));
                                tt = tt * 3;
                                cp = cp + tt;
                            }

                        }

                    }
                    if (_input.Lt(1).Text == "WORD")
                    {

                        if (paso == 2 && solounavez == 0)
                        {

                            string dt = obtenConstante(_input.Lt(2).Text);
                            if (dt.Length == 1)
                            {
                                dt = "00000" + dt;
                            }
                            else if (dt.Length == 2)
                            {
                                dt = "0000" + dt;
                            }
                            else if (dt.Length == 3)
                            {
                                dt = "000" + dt;
                            }
                            probando.Add(dt);
                            solounavez = 1;
                        }
                        else
                        {
                            solounavez = 0;
                        }
                        if (paso == 1)
                        {
                            format.Add("----");
                            contProg.Add(cp);
                            conthex.Add(cp.ToString("X"));
                            cp = cp + 3;
                        }

                    }
                    if (_input.Lt(1).Text == "RESB")
                    {
                        if (paso == 2)
                        {
                            probando.Add("----");
                        }
                        if (paso == 1)
                        {
                            format.Add("----");
                            int c = 0;
                            if (_input.Lt(2).Text.Contains("H"))
                            {
                                string[] val = _input.Lt(2).Text.Split('H');
                                int ab;
                                ab = Convert.ToInt32(val[0], 16);
                                contProg.Add(cp);
                                conthex.Add(cp.ToString("X"));
                                cp = cp + ab;
                            }
                            else
                            {
                                c = Convert.ToInt32(_input.Lt(2).Text, 8);
                                contProg.Add(cp);
                                conthex.Add(cp.ToString("X"));
                                cp = cp + c;
                            }
                        }
                    }
                    if (!((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__4) | (1L << T__5))) != 0)))
                    {
                        _errHandler.RecoverInline(this);


                    }
                    else
                    {
                        if (_input.La(1) == TokenConstants.Eof)
                        {
                            matchedEOF = true;
                        }

                        _errHandler.ReportMatch(this);
                        Consume();
                    }
                }

            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
                if (paso == 1)
                {
                    if (errores.Count > 0)
                    {
                        int c = 0;
                        foreach (int a in lineas)
                        {
                            if (a == re.OffendingToken.Line)
                            {
                                c = 1;
                            }
                        }
                        if (c == 0)
                        {
                            errores.Add("Error en linea :" + re.OffendingToken.Line + " , " + re.OffendingToken.Text);
                            lineas.Add(re.OffendingToken.Line);
                            contProg.Add(cp);
                            conthex.Add(cp.ToString("X"));
                            format.Add("Error");
                            mododir.Add("----");
                        }

                    }
                    else
                    {
                        errores.Add("Error en linea :" + re.OffendingToken.Line + " , " + re.OffendingToken.Text);
                        lineas.Add(re.OffendingToken.Line);
                        contProg.Add(cp);
                        conthex.Add(cp.ToString("X"));
                        format.Add("Error");
                        mododir.Add("----");
                    }
                }
                if (paso == 2)
                {

                    if (b == 0)
                    {
                        probando.Add("----");
                        b = re.OffendingToken.Line;
                    }
                    else
                    {
                        if (b == re.OffendingToken.Line)
                        {
                            b = 0;
                        }
                    }

                }
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class BaseContext : ParserRuleContext
        {
            public ITerminalNode ID() { return GetToken(AnalizadorSICXEParser.ID, 0); }
            public BaseContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_base; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IAnalizadorSICXEListener typedListener = listener as IAnalizadorSICXEListener;
                if (typedListener != null) typedListener.EnterBase(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IAnalizadorSICXEListener typedListener = listener as IAnalizadorSICXEListener;
                if (typedListener != null) typedListener.ExitBase(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IAnalizadorSICXEVisitor<TResult> typedVisitor = visitor as IAnalizadorSICXEVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitBase(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public BaseContext @base()
        {
            BaseContext _localctx = new BaseContext(_ctx, State);
            EnterRule(_localctx, 22, RULE_base);
            if (paso == 1)
            {
                contProg.Add(cp);
                conthex.Add(cp.ToString("X"));
                cp = cp + 0;
            }

            try
            {
                if (paso == 1)
                {
                    mododir.Add("----");
                    format.Add("----");
                }
                if (paso == 2)
                {
                    probando.Add("----");
                }


                EnterOuterAlt(_localctx, 1);
                {
                    State = 124; Match(T__6);
                    State = 125; Match(ID);
                }
                BASE = buscaTabsim(_input.Lt(2).Text);
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
                if (paso == 1)
                {
                    if (errores.Count > 0)
                    {
                        int c = 0;
                        foreach (int a in lineas)
                        {
                            if (a == re.OffendingToken.Line)
                            {
                                c = 1;
                            }
                        }
                        if (c == 0)
                        {
                            errores.Add("Error en linea :" + re.OffendingToken.Line + " , " + re.OffendingToken.Text);
                            lineas.Add(re.OffendingToken.Line);
                            contProg.Add(cp);
                            conthex.Add(cp.ToString("X"));
                            format.Add("Error");
                            mododir.Add("----");
                        }

                    }
                    else
                    {
                        errores.Add("Error en linea :" + re.OffendingToken.Line + " , " + re.OffendingToken.Text);
                        lineas.Add(re.OffendingToken.Line);
                        contProg.Add(cp);
                        conthex.Add(cp.ToString("X"));
                        format.Add("Error");
                        mododir.Add("----");
                    }
                }
                if (paso == 2)
                {

                    if (b == 0)
                    {
                        probando.Add("----");
                        b = re.OffendingToken.Line;
                    }
                    else
                    {
                        if (b == re.OffendingToken.Line)
                        {
                            b = 0;
                        }
                    }

                }
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class OpdirectivaContext : ParserRuleContext
        {
            public ITerminalNode CONSTHEX() { return GetToken(AnalizadorSICXEParser.CONSTHEX, 0); }
            public ITerminalNode CONSTCAD() { return GetToken(AnalizadorSICXEParser.CONSTCAD, 0); }
            public OpdirectivaContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_opdirectiva; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IAnalizadorSICXEListener typedListener = listener as IAnalizadorSICXEListener;
                if (typedListener != null) typedListener.EnterOpdirectiva(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IAnalizadorSICXEListener typedListener = listener as IAnalizadorSICXEListener;
                if (typedListener != null) typedListener.ExitOpdirectiva(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IAnalizadorSICXEVisitor<TResult> typedVisitor = visitor as IAnalizadorSICXEVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitOpdirectiva(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public OpdirectivaContext opdirectiva()
        {
            OpdirectivaContext _localctx = new OpdirectivaContext(_ctx, State);
            EnterRule(_localctx, 24, RULE_opdirectiva);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 127;
                    _la = _input.La(1);
                    if (!(_la == CONSTHEX || _la == CONSTCAD))
                    {
                        _errHandler.RecoverInline(this);
                    }
                    else
                    {
                        if (_input.La(1) == TokenConstants.Eof)
                        {
                            matchedEOF = true;
                        }

                        _errHandler.ReportMatch(this);
                        Consume();
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
                if (paso == 1)
                {
                    if (errores.Count > 0)
                    {
                        int c = 0;
                        foreach (int a in lineas)
                        {
                            if (a == re.OffendingToken.Line)
                            {
                                c = 1;
                            }
                        }
                        if (c == 0)
                        {
                            errores.Add("Error en linea :" + re.OffendingToken.Line + " , " + re.OffendingToken.Text);
                            lineas.Add(re.OffendingToken.Line);
                            contProg.Add(cp);
                            conthex.Add(cp.ToString("X"));
                            format.Add("Error");
                            mododir.Add("----");
                        }

                    }
                    else
                    {
                        errores.Add("Error en linea :" + re.OffendingToken.Line + " , " + re.OffendingToken.Text);
                        lineas.Add(re.OffendingToken.Line);
                        contProg.Add(cp);
                        conthex.Add(cp.ToString("X"));
                        format.Add("Error");
                        mododir.Add("----");
                    }
                }
                if (paso == 2)
                {

                    if (b == 0)
                    {
                        probando.Add("----");
                        b = re.OffendingToken.Line;
                    }
                    else
                    {
                        if (b == re.OffendingToken.Line)
                        {
                            b = 0;
                        }
                    }

                }
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class OpinstruccionContext : ParserRuleContext
        {
            public FormatoContext formato()
            {
                return GetRuleContext<FormatoContext>(0);
            }
            public OpinstruccionContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_opinstruccion; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IAnalizadorSICXEListener typedListener = listener as IAnalizadorSICXEListener;
                if (typedListener != null) typedListener.EnterOpinstruccion(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IAnalizadorSICXEListener typedListener = listener as IAnalizadorSICXEListener;
                if (typedListener != null) typedListener.ExitOpinstruccion(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IAnalizadorSICXEVisitor<TResult> typedVisitor = visitor as IAnalizadorSICXEVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitOpinstruccion(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public OpinstruccionContext opinstruccion()
        {
            OpinstruccionContext _localctx = new OpinstruccionContext(_ctx, State);
            EnterRule(_localctx, 26, RULE_opinstruccion);
            try
            {
                State = 131;
                _errHandler.Sync(this);
                switch (_input.La(1))
                {
                    case T__7:
                    case T__12:
                    case T__13:
                    case T__14:
                    case T__15:
                    case T__16:
                    case T__17:
                    case T__18:
                    case T__19:
                    case T__20:
                    case T__21:
                    case T__22:
                    case T__23:
                    case T__24:
                    case T__25:
                    case T__26:
                    case T__27:
                    case T__28:
                    case T__29:
                    case T__30:
                    case T__31:
                    case T__32:
                    case T__33:
                    case T__34:
                    case T__35:
                    case T__36:
                    case T__37:
                    case T__38:
                    case T__39:
                    case T__40:
                    case T__41:
                    case T__42:
                    case T__43:
                    case T__44:
                    case T__45:
                    case T__46:
                    case T__47:
                    case T__48:
                    case T__49:
                    case T__50:
                    case T__51:
                    case T__52:
                    case T__53:
                    case T__54:
                    case T__55:
                    case T__56:
                    case T__57:
                    case T__58:
                    case T__59:
                    case T__60:
                    case T__61:
                    case T__62:
                    case T__63:
                    case T__64:
                    case T__65:
                    case T__66:
                    case T__67:
                    case T__68:
                    case T__69:
                        EnterOuterAlt(_localctx, 1);
                        {
                            State = 129; formato();
                        }
                        break;
                    case FINL:
                        EnterOuterAlt(_localctx, 2);
                        {
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
                if (paso == 1)
                {
                    if (errores.Count > 0)
                    {
                        int c = 0;
                        foreach (int a in lineas)
                        {
                            if (a == re.OffendingToken.Line)
                            {
                                c = 1;
                            }
                        }
                        if (c == 0)
                        {
                            errores.Add("Error en linea :" + re.OffendingToken.Line + " , " + re.OffendingToken.Text);
                            contProg.Add(cp);
                            conthex.Add(cp.ToString("X"));
                            lineas.Add(re.OffendingToken.Line);
                            format.Add("Error");
                            mododir.Add("----");
                        }

                    }
                    else
                    {
                        errores.Add("Error en linea :" + re.OffendingToken.Line + " , " + re.OffendingToken.Text);
                        lineas.Add(re.OffendingToken.Line);
                        contProg.Add(cp);
                        conthex.Add(cp.ToString("X"));
                        format.Add("Error");
                        mododir.Add("----");
                    }
                }
                if (paso == 2)
                {

                    if (b == 0)
                    {
                        probando.Add("----");
                        b = re.OffendingToken.Line;
                    }
                    else
                    {
                        if (b == re.OffendingToken.Line)
                        {
                            b = 0;
                        }
                    }

                }
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class FormatoContext : ParserRuleContext
        {
            public F1Context f1()
            {
                return GetRuleContext<F1Context>(0);
            }
            public F2Context f2()
            {
                return GetRuleContext<F2Context>(0);
            }
            public F3Context f3()
            {
                return GetRuleContext<F3Context>(0);
            }
            public F4Context f4()
            {
                return GetRuleContext<F4Context>(0);
            }
            public FormatoContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_formato; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IAnalizadorSICXEListener typedListener = listener as IAnalizadorSICXEListener;
                if (typedListener != null) typedListener.EnterFormato(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IAnalizadorSICXEListener typedListener = listener as IAnalizadorSICXEListener;
                if (typedListener != null) typedListener.ExitFormato(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IAnalizadorSICXEVisitor<TResult> typedVisitor = visitor as IAnalizadorSICXEVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitFormato(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public FormatoContext formato()
        {
            FormatoContext _localctx = new FormatoContext(_ctx, State);
            EnterRule(_localctx, 28, RULE_formato);
            try
            {
                State = 137;
                _errHandler.Sync(this);
                switch (_input.La(1))
                {
                    case T__17:
                    case T__18:
                    case T__19:
                    case T__20:
                    case T__21:
                    case T__22:
                        EnterOuterAlt(_localctx, 1);
                        {
                            State = 133; f1();
                        }
                        break;
                    case T__12:
                    case T__13:
                    case T__14:
                    case T__15:
                    case T__16:
                    case T__23:
                    case T__24:
                    case T__25:
                    case T__26:
                    case T__27:
                    case T__28:
                        EnterOuterAlt(_localctx, 2);
                        {
                            State = 134; f2();
                        }
                        break;
                    case T__29:
                    case T__30:
                    case T__31:
                    case T__32:
                    case T__33:
                    case T__34:
                    case T__35:
                    case T__36:
                    case T__37:
                    case T__38:
                    case T__39:
                    case T__40:
                    case T__41:
                    case T__42:
                    case T__43:
                    case T__44:
                    case T__45:
                    case T__46:
                    case T__47:
                    case T__48:
                    case T__49:
                    case T__50:
                    case T__51:
                    case T__52:
                    case T__53:
                    case T__54:
                    case T__55:
                    case T__56:
                    case T__57:
                    case T__58:
                    case T__59:
                    case T__60:
                    case T__61:
                    case T__62:
                    case T__63:
                    case T__64:
                    case T__65:
                    case T__66:
                    case T__67:
                    case T__68:
                    case T__69:
                        EnterOuterAlt(_localctx, 3);
                        {
                            State = 135; f3();
                        }
                        break;
                    case T__7:
                        EnterOuterAlt(_localctx, 4);
                        {
                            State = 136; f4();
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);

                if (paso == 1)
                {
                    if (errores.Count > 0)
                    {
                        int c = 0;
                        foreach (int a in lineas)
                        {
                            if (a == re.OffendingToken.Line)
                            {
                                c = 1;
                            }
                        }
                        if (c == 0)
                        {
                            errores.Add("Error en linea :" + re.OffendingToken.Line + " , " + re.OffendingToken.Text);

                            lineas.Add(re.OffendingToken.Line);
                            contProg.Add(cp);
                            conthex.Add(cp.ToString("X"));
                            format.Add("Error");
                            mododir.Add("----");
                        }

                    }
                    else
                    {
                        errores.Add("Error en linea :" + re.OffendingToken.Line + " , " + re.OffendingToken.Text);
                        lineas.Add(re.OffendingToken.Line);
                        contProg.Add(cp);
                        conthex.Add(cp.ToString("X"));
                        format.Add("Error");
                        mododir.Add("----");
                    }
                }
                if (paso == 2)
                {

                    if (b == 0)
                    {
                        probando.Add("----");
                        b = re.OffendingToken.Line;
                    }
                    else
                    {
                        if (b == re.OffendingToken.Line)
                        {
                            b = 0;
                        }
                    }

                }
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class F1Context : ParserRuleContext
        {
            public Codop1Context codop1()
            {
                return GetRuleContext<Codop1Context>(0);
            }
            public F1Context(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_f1; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IAnalizadorSICXEListener typedListener = listener as IAnalizadorSICXEListener;
                if (typedListener != null) typedListener.EnterF1(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IAnalizadorSICXEListener typedListener = listener as IAnalizadorSICXEListener;
                if (typedListener != null) typedListener.ExitF1(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IAnalizadorSICXEVisitor<TResult> typedVisitor = visitor as IAnalizadorSICXEVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitF1(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public F1Context f1()
        {
            F1Context _localctx = new F1Context(_ctx, State);
            EnterRule(_localctx, 30, RULE_f1);
            try
            {
                if (paso == 1)
                {
                    format.Add("f1");
                    mododir.Add("----");
                    contProg.Add(cp);
                    conthex.Add(cp.ToString("X"));
                    cp = cp + 1;
                }
                if (paso == 2)
                {
                    string s = _input.Lt(1).Text;
                    s = checaNemonico(s);
                    probando.Add(s);
                }



                EnterOuterAlt(_localctx, 1);
                {
                    State = 139; codop1();
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
                if (paso == 1)
                {
                    if (errores.Count > 0)
                    {
                        int c = 0;
                        foreach (int a in lineas)
                        {
                            if (a == re.OffendingToken.Line)
                            {
                                c = 1;
                            }
                        }
                        if (c == 0)
                        {
                            errores.Add("Error en linea :" + re.OffendingToken.Line + " , " + re.OffendingToken.Text);
                            lineas.Add(re.OffendingToken.Line);
                            contProg.Add(cp);
                            conthex.Add(cp.ToString("X"));
                            format.Add("Error");
                            mododir.Add("----");
                        }

                    }
                    else
                    {
                        errores.Add("Error en linea :" + re.OffendingToken.Line + " , " + re.OffendingToken.Text);
                        lineas.Add(re.OffendingToken.Line);
                        contProg.Add(cp);
                        conthex.Add(cp.ToString("X"));
                        format.Add("Error");
                        mododir.Add("----");
                    }
                }
                if (paso == 2)
                {

                    if (b == 0)
                    {
                        probando.Add("----");
                        b = re.OffendingToken.Line;
                    }
                    else
                    {
                        if (b == re.OffendingToken.Line)
                        {
                            b = 0;
                        }
                    }

                }
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class F2Context : ParserRuleContext
        {
            public Subf2aContext subf2a()
            {
                return GetRuleContext<Subf2aContext>(0);
            }
            public Subf2bContext subf2b()
            {
                return GetRuleContext<Subf2bContext>(0);
            }
            public Subf2cContext subf2c()
            {
                return GetRuleContext<Subf2cContext>(0);
            }
            public Subf2dContext subf2d()
            {
                return GetRuleContext<Subf2dContext>(0);
            }
            public F2Context(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_f2; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IAnalizadorSICXEListener typedListener = listener as IAnalizadorSICXEListener;
                if (typedListener != null) typedListener.EnterF2(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IAnalizadorSICXEListener typedListener = listener as IAnalizadorSICXEListener;
                if (typedListener != null) typedListener.ExitF2(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IAnalizadorSICXEVisitor<TResult> typedVisitor = visitor as IAnalizadorSICXEVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitF2(this);
                else return visitor.VisitChildren(this);
            }
        }
        public string buscaRegistro(string reg)
        {
            string m = "";
            switch (reg)
            {
                case "A":
                    m = "0";
                    break;
                case "X":
                    m = "1";
                    break;
                case "L":
                    m = "2";
                    break;
                case "B":
                    m = "3";
                    break;
                case "S":
                    m = "4";
                    break;
                case "T":
                    m = "5";
                    break;
                case "":
                    m = "0";
                    break;
                case " ":
                    m = "0";
                    break;
            }
            return m;
        }
        [RuleVersion(0)]
        public F2Context f2()
        {
            F2Context _localctx = new F2Context(_ctx, State);
            EnterRule(_localctx, 32, RULE_f2);
            try
            {
                if (paso == 1)
                {
                    format.Add("f2");
                    mododir.Add("----");
                    contProg.Add(cp);
                    conthex.Add(cp.ToString("X"));
                    cp = cp + 2;
                }
                if (paso == 2)
                {
                    string s = _input.Lt(1).Text;
                    s = checaNemonico(s);
                    string b = buscaRegistro(_input.Lt(2).Text);
                    string c = buscaRegistro(_input.Lt(4).Text);
                    string obj2 = s + b + c;
                    if (obj2.Length == 3)
                    {
                        obj2 = obj2 + "0";
                    }
                    probando.Add(obj2);
                }



                State = 145;
                _errHandler.Sync(this);
                switch (_input.La(1))
                {
                    case T__23:
                    case T__24:
                    case T__25:
                    case T__26:
                    case T__27:
                    case T__28:
                        EnterOuterAlt(_localctx, 1);
                        {
                            State = 141; subf2a();
                        }
                        break;
                    case T__12:
                    case T__13:
                        EnterOuterAlt(_localctx, 2);
                        {
                            State = 142; subf2b();
                        }
                        break;
                    case T__14:
                    case T__15:
                        EnterOuterAlt(_localctx, 3);
                        {
                            State = 143; subf2c();
                        }
                        break;
                    case T__16:
                        EnterOuterAlt(_localctx, 4);
                        {
                            State = 144; subf2d();
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
                if (paso == 1)
                {
                    if (errores.Count > 0)
                    {
                        int c = 0;
                        foreach (int a in lineas)
                        {
                            if (a == re.OffendingToken.Line)
                            {
                                c = 1;
                            }
                        }
                        if (c == 0)
                        {
                            errores.Add("Error en linea :" + re.OffendingToken.Line + " , " + re.OffendingToken.Text);
                            lineas.Add(re.OffendingToken.Line);
                            contProg.Add(cp);
                            conthex.Add(cp.ToString("X"));
                            format.Add("Error");
                            mododir.Add("----");
                        }

                    }
                    else
                    {
                        errores.Add("Error en linea :" + re.OffendingToken.Line + " , " + re.OffendingToken.Text);
                        lineas.Add(re.OffendingToken.Line);
                        contProg.Add(cp);
                        conthex.Add(cp.ToString("X"));
                        format.Add("Error");
                        mododir.Add("----");
                    }
                }
                if (paso == 2)
                {

                    if (b == 0)
                    {
                        probando.Add("----");
                        b = re.OffendingToken.Line;
                    }
                    else
                    {
                        if (b == re.OffendingToken.Line)
                        {
                            b = 0;
                        }
                    }

                }
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class F3Context : ParserRuleContext
        {
            public Simple3Context simple3()
            {
                return GetRuleContext<Simple3Context>(0);
            }
            public Indirecto3Context indirecto3()
            {
                return GetRuleContext<Indirecto3Context>(0);
            }
            public Inmediato3Context inmediato3()
            {
                return GetRuleContext<Inmediato3Context>(0);
            }
            public F3Context(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_f3; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IAnalizadorSICXEListener typedListener = listener as IAnalizadorSICXEListener;
                if (typedListener != null) typedListener.EnterF3(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IAnalizadorSICXEListener typedListener = listener as IAnalizadorSICXEListener;
                if (typedListener != null) typedListener.ExitF3(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IAnalizadorSICXEVisitor<TResult> typedVisitor = visitor as IAnalizadorSICXEVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitF3(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public F3Context f3()
        {
            F3Context _localctx = new F3Context(_ctx, State);
            EnterRule(_localctx, 34, RULE_f3);
            try
            {

                State = 150;
                _errHandler.Sync(this);
                switch (Interpreter.AdaptivePredict(_input, 10, _ctx))
                {
                    case 1:
                        EnterOuterAlt(_localctx, 1);
                        {
                            State = 147; simple3();
                        }
                        break;

                    case 2:
                        EnterOuterAlt(_localctx, 2);
                        {
                            State = 148; indirecto3();
                        }
                        break;

                    case 3:
                        EnterOuterAlt(_localctx, 3);
                        {
                            State = 149; inmediato3();
                        }
                        break;
                }
                if (form4 == 1)
                {
                    form4 = 0;
                    //format.Add("f4");
                }
                else
                {
                    if (paso == 1)
                    {
                        format.Add("f3");

                        contProg.Add(cp);
                        conthex.Add(cp.ToString("X"));
                        cp = cp + 3;
                    }

                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
                //conthex.Add(cp.ToString("X"));
                if (paso == 1)
                {
                    if (errores.Count > 0)
                    {
                        int c = 0;
                        foreach (int a in lineas)
                        {
                            if (a == re.OffendingToken.Line)
                            {
                                c = 1;
                            }
                        }
                        if (c == 0)
                        {
                            errores.Add("Error en linea  :" + re.OffendingToken.Line + " , " + re.OffendingToken.Text);
                            contProg.Add(cp);
                            conthex.Add(cp.ToString("X"));
                            lineas.Add(re.OffendingToken.Line);
                            format.Add("Error");
                            mododir.Add("----");
                        }

                    }
                    else
                    {
                        errores.Add("Error en linea :" + re.OffendingToken.Line + " , " + re.OffendingToken.Text);
                        contProg.Add(cp);
                        conthex.Add(cp.ToString("X"));
                        lineas.Add(re.OffendingToken.Line);
                        format.Add("Error");
                        mododir.Add("----");
                    }
                }
                if (paso == 2)
                {

                    if (b == 0)
                    {
                        probando.Add("----");
                        b = re.OffendingToken.Line;
                    }
                    else
                    {
                        if (b == re.OffendingToken.Line)
                        {
                            b = 0;
                        }
                    }

                }
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class F4Context : ParserRuleContext
        {
            public F3Context f3()
            {
                return GetRuleContext<F3Context>(0);
            }
            public F4Context(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_f4; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IAnalizadorSICXEListener typedListener = listener as IAnalizadorSICXEListener;
                if (typedListener != null) typedListener.EnterF4(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IAnalizadorSICXEListener typedListener = listener as IAnalizadorSICXEListener;
                if (typedListener != null) typedListener.ExitF4(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IAnalizadorSICXEVisitor<TResult> typedVisitor = visitor as IAnalizadorSICXEVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitF4(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public F4Context f4()
        {
            F4Context _localctx = new F4Context(_ctx, State);
            EnterRule(_localctx, 36, RULE_f4);
            try
            {
                int x = 0;


                format4 = 1;
                form4 = 1;

                EnterOuterAlt(_localctx, 1);
                {
                    State = 152; Match(T__7);
                    State = 153; f3();
                }
                if (paso == 1)
                {
                    format.Add("f4");
                    contProg.Add(cp);
                    conthex.Add(cp.ToString("X"));
                    cp = cp + 4;
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
                if (paso == 1)
                {
                    if (errores.Count > 0)
                    {
                        int c = 0;
                        foreach (int a in lineas)
                        {
                            if (a == re.OffendingToken.Line)
                            {
                                c = 1;
                            }
                        }
                        if (c == 0)
                        {
                            errores.Add("Error en linea :" + re.OffendingToken.Line + " , " + re.OffendingToken.Text);
                            lineas.Add(re.OffendingToken.Line);
                            contProg.Add(cp);
                            conthex.Add(cp.ToString("X"));
                            format.Add("Error");
                            mododir.Add("----");
                        }

                    }
                    else
                    {
                        errores.Add("Error en linea :" + re.OffendingToken.Line + " , " + re.OffendingToken.Text);
                        lineas.Add(re.OffendingToken.Line);
                        contProg.Add(cp);
                        conthex.Add(cp.ToString("X"));
                        format.Add("Error");
                        mododir.Add("----");
                    }
                }
                if (paso == 2)
                {

                    if (b == 0)
                    {
                        probando.Add("----");
                        b = re.OffendingToken.Line;
                    }
                    else
                    {
                        if (b == re.OffendingToken.Line)
                        {
                            b = 0;
                        }
                    }

                }
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class Simple3Context : ParserRuleContext
        {
            public Codop3Context codop3()
            {
                return GetRuleContext<Codop3Context>(0);
            }
            public ITerminalNode ID() { return GetToken(AnalizadorSICXEParser.ID, 0); }
            public ITerminalNode NUM() { return GetToken(AnalizadorSICXEParser.NUM, 0); }
            public Simple3Context(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_simple3; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IAnalizadorSICXEListener typedListener = listener as IAnalizadorSICXEListener;
                if (typedListener != null) typedListener.EnterSimple3(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IAnalizadorSICXEListener typedListener = listener as IAnalizadorSICXEListener;
                if (typedListener != null) typedListener.ExitSimple3(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IAnalizadorSICXEVisitor<TResult> typedVisitor = visitor as IAnalizadorSICXEVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitSimple3(this);
                else return visitor.VisitChildren(this);
            }
        }
        public string casoCSimpleF4(string v1, string v2, string bandera)
        {
            string codobj;
            char s = v1[0];
            char n = v1[1];
            string d2 = hexToBin(n);
            string d3 = d2 + "11";
            string d4 = bandera;
            string d31 = binTohex(d3);
            if (v2.Length == 3)
            {
                v2 = "00" + v2;
            }
            if (v2.Length == 4)
            {
                v2 = "0" + v2;
            }
            codobj = s + d31 + "9" + v2;
            //probando.Add("s"+s+"d3"+d3+"d31"+d31+"d4"+d4+"v2");
            return codobj;
        }
        public string convierteObjSimpleF4(string v1, string v2, string bandera)
        {
            string codobj;
            char s = v1[0];
            char n = v1[1];
            string d2 = hexToBin(n);
            string d3 = d2 + "11";
            string d4 = bandera;
            string d31 = binTohex(d3);
            if (v2.Length == 3)
            {
                v2 = "00" + v2;
            }
            if (v2.Length == 4)
            {
                v2 = "0" + v2;
            }
            codobj = s + d31 + d4 + v2;
            //probando.Add("s"+s+"d3"+d3+"d31"+d31+"d4"+d4+"v2");
            return codobj;
        }

        [RuleVersion(0)]
        public Simple3Context simple3()
        {
            Simple3Context _localctx = new Simple3Context(_ctx, State);
            EnterRule(_localctx, 38, RULE_simple3);
            string x, y, z;

            try
            {

                State = 171;
                _errHandler.Sync(this);
                if (paso == 1)
                {
                    mododir.Add("Simple");
                }
                switch (Interpreter.AdaptivePredict(_input, 11, _ctx))
                {
                    case 1:
                        //probando.Add("Aqui hace la prueba " + _input.Lt(1).Text + " Simple");
                        x = _input.Lt(1).Text;
                        int linea = _input.Lt(1).Line;
                        y = _input.Lt(2).Text;
                        // probando.Add("simple");
                        EnterOuterAlt(_localctx, 1);
                        {
                            State = 155; codop3();
                            State = 156; Match(ID);

                            if (paso == 2)
                            {
                                if (format4 == 1)
                                {
                                    format4 = 0;
                                    z = _input.Lt(3).Text;
                                    string a = checaNemonico(_input.Lt(1).Text);
                                    string b = obtenConstante(_input.Lt(3).Text);

                                    string c = convierteObjSimpleF4(x, z, "1");
                                    probando.Add(c);
                                }
                                else
                                {
                                    string de = checaNemonico(x);
                                    string ef = _input.Lt(2).Text;
                                    string dirtab = buscaTabsim(y) + "H";
                                    if (dirtab.Length == 1)
                                    {
                                        dirtab = "00" + dirtab;
                                    }
                                    if (dirtab.Length == 2)
                                    {
                                        dirtab = "0" + dirtab;
                                    }
                                    string codi = simpleM(x, y, linea);


                                    probando.Add(codi);

                                    //string codi = inmediatosimpleC(de, dirtab);

                                    //probando.Add(_input.Lt(1) + "Simple f3 m");

                                }
                            }
                        }

                        break;

                    case 2:
                        EnterOuterAlt(_localctx, 2);
                        {
                            State = 158; codop3();
                            State = 159; Match(NUM);
                        }

                        if (paso == 2)
                        {
                            string d = checaNemonico(_input.Lt(1).Text);
                            //string e = _input.Lt(2).Text;
                            string cod = inmediatosimpleC(d, _input.Lt(2).Text, "0");
                            probando.Add(cod);
                        }
                        break;

                    case 3:
                        y = _input.Lt(2).Text;
                        x = _input.Lt(1).Text;
                        EnterOuterAlt(_localctx, 3);
                        {
                            State = 161; codop3();
                            State = 162; Match(NUM);
                            State = 163; Match(T__8);
                            State = 164; Match(T__9);
                        }

                        if (paso == 2)
                        {
                            if (format4 == 1)
                            {
                                format4 = 0;

                                string a = checaNemonico(x);
                                string b = obtenConstante(y);

                                string c = casoCSimpleF4(a, b, "9");
                                probando.Add(c);
                            }
                            else
                            {
                                string d;
                                d = checaNemonico(x);
                                // e = _input.Lt(3).Text;
                                string cod = inmediatosimpleC(d, y, "8");

                                probando.Add(cod);

                            }
                        }
                        break;

                    case 4:
                        x = _input.Lt(1).Text;
                        int lin = _input.Lt(1).Line;
                        y = _input.Lt(2).Text;

                        EnterOuterAlt(_localctx, 4);
                        {
                            State = 166; codop3();
                            State = 167; Match(ID);
                            State = 168; Match(T__8);
                            State = 169; Match(T__9);

                            if (paso == 2)
                            {
                                if (format4 == 1)
                                {
                                    format4 = 0;
                                    z = _input.Lt(3).Text;
                                    string a = checaNemonico(_input.Lt(1).Text);
                                    string b = obtenConstante(_input.Lt(2).Text);

                                    string c = convierteObjSimpleF4(x, z, "9");
                                    probando.Add(c);
                                }
                                else
                                {
                                    string de = checaNemonico(x);
                                    string ef = _input.Lt(2).Text;
                                    string dirtab = buscaTabsim(y) + "H";
                                    if (dirtab.Length == 1)
                                    {
                                        dirtab = "00" + dirtab;
                                    }
                                    if (dirtab.Length == 2)
                                    {
                                        dirtab = "0" + dirtab;
                                    }
                                    string codi = simpleM2(x, y, lin);


                                    probando.Add(codi);

                                    //string codi = inmediatosimpleC(de, dirtab);

                                    //probando.Add(_input.Lt(1) + "Simple f3 m");

                                }

                            }
                        }
                        break;
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
                if (paso == 2)
                {
                    probando.Add("Direccionamiento simple no encontrado");
                }
                if (paso == 1)
                {
                    if (errores.Count > 0)
                    {
                        int c = 0;
                        foreach (int a in lineas)
                        {
                            if (a == re.OffendingToken.Line)
                            {
                                c = 1;
                            }
                        }
                        if (c == 0)
                        {
                            errores.Add("Error en linea ++:" + re.OffendingToken.Line + " , " + re.OffendingToken.Text);
                            contProg.Add(cp);
                            conthex.Add(cp.ToString("X"));
                            lineas.Add(re.OffendingToken.Line);
                            format.Add("Error");
                            mododir.Add("----");
                        }

                    }
                    else
                    {
                        errores.Add("Error en linea ++:" + re.OffendingToken.Line + " , " + re.OffendingToken.Text);
                        contProg.Add(cp);
                        conthex.Add(cp.ToString("X"));
                        lineas.Add(re.OffendingToken.Line);
                        format.Add("Error");
                        mododir.Add("----");
                    }
                }
                if (paso == 2)
                {

                    if (b == 0)
                    {
                        probando.Add("----");
                        b = re.OffendingToken.Line;
                    }
                    else
                    {
                        if (b == re.OffendingToken.Line)
                        {
                            b = 0;
                        }
                    }

                }
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class Indirecto3Context : ParserRuleContext
        {
            public Codop3Context codop3()
            {
                return GetRuleContext<Codop3Context>(0);
            }
            public ITerminalNode NUM() { return GetToken(AnalizadorSICXEParser.NUM, 0); }
            public ITerminalNode ID() { return GetToken(AnalizadorSICXEParser.ID, 0); }
            public Indirecto3Context(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_indirecto3; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IAnalizadorSICXEListener typedListener = listener as IAnalizadorSICXEListener;
                if (typedListener != null) typedListener.EnterIndirecto3(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IAnalizadorSICXEListener typedListener = listener as IAnalizadorSICXEListener;
                if (typedListener != null) typedListener.ExitIndirecto3(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IAnalizadorSICXEVisitor<TResult> typedVisitor = visitor as IAnalizadorSICXEVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitIndirecto3(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public Indirecto3Context indirecto3()
        {
            Indirecto3Context _localctx = new Indirecto3Context(_ctx, State);
            EnterRule(_localctx, 40, RULE_indirecto3);

            try
            {
                if (paso == 1)
                {
                    mododir.Add("indirecto");
                }

                State = 181;
                _errHandler.Sync(this);
                switch (Interpreter.AdaptivePredict(_input, 12, _ctx))
                {
                    case 1:
                        string xs = _input.Lt(1).Text;
                        string ys = _input.Lt(3).Text;
                        if (paso == 2)
                        {
                            string obd = checaNemonico(xs);
                            string codob = indirectoC(obd, ys);
                            probando.Add(codob);
                        }

                        EnterOuterAlt(_localctx, 1);
                        {
                            State = 173; codop3();
                            State = 174; Match(T__10);
                            State = 175; Match(NUM);
                        }
                        break;

                    case 2:
                        string x = _input.Lt(1).Text;
                        string y = _input.Lt(3).Text;
                        if (paso == 2)
                        {

                            if (format4 == 1)
                            {

                                format4 = 0;

                                string a = checaNemonico(x);
                                //string b = obtenConstante(y);
                                string b = buscaTabsim(y);
                                string c = convierteObjIndiF4(a, b);
                                probando.Add(c + "*");
                            }
                            else
                            {
                                string d = checaNemonico(x);
                                string e = _input.Lt(2).Text;
                                string cod = indirectoM(x, y, _input.Lt(1).Line);
                                probando.Add(cod);

                            }
                        }

                        EnterOuterAlt(_localctx, 2);
                        {
                            State = 177; codop3();
                            State = 178; Match(T__10);
                            State = 179; Match(ID);
                        }
                        break;
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
                if (errores.Count > 0)
                {
                    int c = 0;
                    foreach (int a in lineas)
                    {
                        if (a == re.OffendingToken.Line)
                        {
                            c = 1;
                        }
                    }
                    if (c == 0)
                    {
                        errores.Add("Error en linea :" + re.OffendingToken.Line + " , " + re.OffendingToken.Text);
                        lineas.Add(re.OffendingToken.Line);
                        contProg.Add(cp);
                        conthex.Add(cp.ToString("X"));

                    }

                }
                else
                {
                    errores.Add("Error en linea :" + re.OffendingToken.Line + " , " + re.OffendingToken.Text);
                    lineas.Add(re.OffendingToken.Line);
                    contProg.Add(cp);
                    conthex.Add(cp.ToString("X"));
                }
                if (paso == 2)
                {

                    if (b == 0)
                    {
                        probando.Add("----");
                        b = re.OffendingToken.Line;
                    }
                    else
                    {
                        if (b == re.OffendingToken.Line)
                        {
                            b = 0;
                        }
                    }

                }
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class Inmediato3Context : ParserRuleContext
        {
            public Codop3Context codop3()
            {
                return GetRuleContext<Codop3Context>(0);
            }
            public ITerminalNode NUM() { return GetToken(AnalizadorSICXEParser.NUM, 0); }
            public ITerminalNode ID() { return GetToken(AnalizadorSICXEParser.ID, 0); }
            public Inmediato3Context(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_inmediato3; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IAnalizadorSICXEListener typedListener = listener as IAnalizadorSICXEListener;
                if (typedListener != null) typedListener.EnterInmediato3(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IAnalizadorSICXEListener typedListener = listener as IAnalizadorSICXEListener;
                if (typedListener != null) typedListener.ExitInmediato3(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IAnalizadorSICXEVisitor<TResult> typedVisitor = visitor as IAnalizadorSICXEVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitInmediato3(this);
                else return visitor.VisitChildren(this);
            }
        }
        public string checaTabSim(string pos)
        {
            int m = 0;

            for (int j = 0; j < tabsimb.Count; j++)
            {
                if (_input.Lt(2).Text == tabsimb[j])
                {
                    m = j;
                    //probando.Add(_input.Lt(1).Text + CodOp[m] + "->\t " + _input.Lt(2).Text + " ");
                }
            }

            return dirTabimHex[m];
        }
        public string checaNemonico(string dato)
        {
            int m = 0;
            for (int i = 0; i < nemonicos.Length; i++)
            {
                if (nemonicos[i] == dato)
                {
                    m = i;

                }

            }
            if (m != 0)
            {
                return CodOp[m];
            }
            else
            {
                return "Error";
            }

        }

        public string obtenConstante(string c)
        {
            string[] val = new string[1];
            if (c.Contains("H"))
            {
                val = c.Split('H');

             
            }
            else
            {
                val[0] = c;
            }
            return val[0];
        }
        public string hexToBin(char hex)
        {
            string bin = "";
            switch (hex)
            {

                case '0':
                    bin = "00";
                    break;
                case '8':
                    bin = "10";
                    break;
                case '4':
                    bin = "01";
                    break;
                case 'C':
                    bin = "11";
                    break;

            }
            return bin;
        }
        public string binTohex(string bin)
        {
            string dato = "";
            switch (bin)
            {
                case "0000":
                    bin = "0";
                    break;
                case "0001":
                    bin = "1";
                    break;
                case "0010":
                    bin = "2";
                    break;
                case "0011":
                    bin = "3";
                    break;
                case "0100":
                    bin = "4";
                    break;
                case "0101":
                    bin = "5";
                    break;
                case "0110":
                    bin = "6";
                    break;
                case "0111":
                    bin = "7";
                    break;
                case "1000":
                    bin = "8";
                    break;
                case "1001":
                    bin = "9";
                    break;
                case "1010":
                    bin = "A";
                    break;
                case "1011":
                    bin = "B";
                    break;
                case "1100":
                    bin = "C";
                    break;
                case "1101":
                    bin = "D";
                    break;
                case "1110":
                    bin = "E";
                    break;
                case "1111":
                    bin = "F";
                    break;

            }
            return bin;
        }
        public string convierteObjF4(string v1, string v2)
        {
            string codobj;
            char s = v1[0];
            char n = v1[1];
            string d2 = hexToBin(n);
            string d3 = d2 + "01";
            string d4 = "1";
            string d31 = binTohex(d3);
            if (v2.Length == 3)
            {
                v2 = "00" + v2;
            }
            if (v2.Length == 4)
            {
                v2 = "0" + v2;
            }
            if (v2.Length == 2)
            {
                v2 = "000" + v2;
            }
            if (v2.Length == 1)
            {
                v2 = "0000" + v2;
            }

            codobj = s + d31 + d4 + v2;
            //probando.Add("s"+s+"d3"+d3+"d31"+d31+"d4"+d4+"v2");
            return codobj;
        }

        public string convierteObjIndiF4(string v1, string v2)
        {
            string codobj;
            char s = v1[0];
            char n = v1[1];
            string d2 = hexToBin(n);
            string d3 = d2 + "10";
            string d4 = "1";
            string d31 = binTohex(d3);
            if (v2.Length == 3)
            {
                v2 = "00" + v2;
            }
            if (v2.Length == 4)
            {
                v2 = "0" + v2;
            }
            if (v2.Length == 2)
            {
                v2 = "000" + v2;
            }
            if (v2.Length == 1)
            {
                v2 = "0000" + v2;
            }

            codobj = s + d31 + d4 + v2;
            return codobj;
        }
        public string buscaCP(int nlinea)
        {
            string valcp = "";
            try
            {
                valcp = conthex[nlinea];
            }
            catch (Exception e)
            {
                valcp = "0";
            }
            return valcp;
        }
        public int checarelCP(int nlinea, string etiq)
        {
            string desp = "";
            int despl = 0;
            string cp = buscaCP(nlinea);
            string TA = buscaTabsim(etiq);

            despl = Convert.ToInt32(TA, 16) - Convert.ToInt32(cp, 16);
            //int numeroDecimal = Convert.ToInt32(numeroHexadecimal, 16);
            return despl;
        }
        public int checarelB(string etiq)
        {
            string dir = "";
            string desp = "";
            int despl = 0;

            string TA = buscaTabsim(etiq);

            despl = Convert.ToInt32(TA, 16) - Convert.ToInt32(BASE, 16);
            //int numeroDecimal = Convert.ToInt32(numeroHexadecimal, 16);
            return despl;

        }

        public string indirectoM(string d1, string d2, int ln)
        {
            string n = "";
            string m = "";
            string par3 = "";
            d1 = checaNemonico(d1);
            char a = d1[0];
            char b = d1[1];
            string r = hexToBin(b);
            string p2 = r + "10";
            string p3 = binTohex(p2);

            int al = checarelCP(ln, d2);
            string desp = "";
            if (al > -2048 && al < 2048)
            {
                string dat = al.ToString("X");

                int bb = 0;
                int mr = 0;
                foreach (char nx in dat)
                {
                    bb++;
                    if (bb > 5)
                    {
                        mr = 1;
                        desp = desp + nx;
                    }
                }
                if (mr == 0)
                {
                    desp = dat;
                }
                switch (desp.Length)
                {
                    case 1:
                        desp = "00" + desp;
                        break;
                    case 2:
                        desp = "0" + "desp";
                        break;
                }
                par3 = "2";
            }
            else
            {
                int abase = checarelB(d2);
                if (abase >= 0 && abase < 4096)
                {
                    string dat = abase.ToString("X");

                    int bb = 0;
                    int dz = 0;
                    foreach (char nx in dat)
                    {
                        bb++;
                        if (bb > 5)
                        {
                            dz = 1;
                            desp = desp + nx;
                        }
                    }
                    if (dz == 0)
                    {
                        desp = dat;
                    }
                    switch (desp.Length)
                    {
                        case 1:
                            desp = "00" + desp;
                            break;
                        case 2:
                            desp = "0" + desp;
                            break;
                    }
                    par3 = "4";
                }
                else
                {
                    n = "Error no es relativo a CP o B";
                }
            }

            //string desp = dat[dat.Length - 2].ToString() +dat[dat.Length - 1].ToString()+ dat[dat.Length-1].ToString();
            //string desp = dat.Substring(dat.Length-3,3);


            if (m.Length == 1)
            {
                m = "00" + m;
            }
            else if (m.Length == 2)
            {
                m = "0" + m;
            }
            n = a + p3 + par3 + desp;
            return n;
        }
        public string simpleM(string d1, string d2, int ln)
        {
            string n = "";
            string m = "";
            string par3 = "";
            d1 = checaNemonico(d1);
            char a = d1[0];
            char b = d1[1];
            string r = hexToBin(b);
            string p2 = r + "11";
            string p3 = binTohex(p2);

            int al = checarelCP(ln, d2);
            string desp = "";
            if (al > -2048 && al < 2048)
            {
                string dat = al.ToString("X");

                int bb = 0;
                int croc = 0;
                foreach (char nx in dat)
                {
                    bb++;
                    if (bb > 5)
                    {
                        croc = 1;
                        desp = desp + nx;
                    }
                }
                if (croc == 0)
                {
                    desp = dat;
                }
                switch (desp.Length)
                {
                    case 1:
                        desp = "00" + desp;
                        break;
                    case 2:
                        desp = "0" + desp;
                        break;
                }
                par3 = "2";
            }
            else
            {
                int abase = checarelB(d2);
                if (abase >= 0 && abase < 4096)
                {
                    string dat = abase.ToString("X");

                    int bb = 0;
                    int crom = 0;
                    foreach (char nx in dat)
                    {
                        bb++;
                        if (bb > 5)
                        {
                            crom = 1;
                            desp = desp + nx;
                        }
                    }
                    if (crom == 0)
                    {
                        desp = dat;
                    }
                    switch (desp.Length)
                    {
                        case 1:
                            desp = "00" + desp;
                            break;
                        case 2:
                            desp = "0" + desp;
                            break;
                    }
                    par3 = "4";
                }
                else
                {
                    n = "Error no es relativo a CP o B";
                }
            }

            //string desp = dat[dat.Length - 2].ToString() +dat[dat.Length - 1].ToString()+ dat[dat.Length-1].ToString();
            //string desp = dat.Substring(dat.Length-3,3);


            if (m.Length == 1)
            {
                m = "00" + m;
            }
            else if (m.Length == 2)
            {
                m = "0" + m;
            }
            n = a + p3 + par3 + desp;
            return n;
        }

        public string simpleM2(string d1, string d2, int ln)
        {
            string n = "";
            string m = "";
            string par3 = "";
            d1 = checaNemonico(d1);
            char a = d1[0];
            char b = d1[1];
            string r = hexToBin(b);
            string p2 = r + "11";
            string p3 = binTohex(p2);

            int al = checarelCP(ln, d2);
            string desp = "";
            if (al > -2048 && al < 2048)
            {
                string dat = al.ToString("X");

                int bb = 0;
                int nz = 0;
                foreach (char nx in dat)
                {
                    bb++;
                    if (bb > 5)
                    {
                        nz = 1;
                        desp = desp + nx;
                    }
                }
                if (nz == 0)
                {
                    desp = dat;
                }
                switch (desp.Length)
                {
                    case 1:
                        desp = "00" + desp;
                        break;
                    case 2:
                        desp = "0" + desp;
                        break;
                }
                par3 = "A";
            }
            else
            {
                int abase = checarelB(d2);
                if (abase >= 0 && abase < 4096)
                {
                    string dat = abase.ToString("X");

                    int bb = 0;
                    int nrz = 0;
                    foreach (char nx in dat)
                    {
                        bb++;
                        if (bb > 5)
                        {
                            nrz = 1;
                            desp = desp + nx;
                        }
                    }
                    if (nrz == 0)
                    {
                        desp = dat;
                    }
                    par3 = "C";
                }
                else
                {
                    n = "Error no es relativo a CP o B";
                }
            }

            //string desp = dat[dat.Length - 2].ToString() +dat[dat.Length - 1].ToString()+ dat[dat.Length-1].ToString();
            //string desp = dat.Substring(dat.Length-3,3);


            if (m.Length == 1)
            {
                m = "00" + m;
            }
            else if (m.Length == 2)
            {
                m = "0" + m;
            }
            n = a + p3 + par3 + desp;
            return n;
        }
        public string inmediatosimpleC(string d1, string d2, string cass)
        {
            string n = "";
            string sr = cass;
            string m;
            char a = d1[0];
            char b = d1[1];
            string r = hexToBin(b);
            string p2 = r + "11";
            string p3 = binTohex(p2);
            if (d2.Contains("H"))
            {
                m = obtenConstante(d2);
            }
            else
            {
                int dd = Convert.ToInt32(d2);
                m = dd.ToString("X");
            }
            if (m.Length == 1)
            {
                m = "00" + m;
            }
            else if (m.Length == 2)
            {
                m = "0" + m;
            }
            n = a + p3 + cass + m;
            return n;
        }
        public string indirectoC(string d1, string d2)
        {
            string n = "";
            string m;
            char a = d1[0];
            char b = d1[1];
            string r = hexToBin(b);
            string p2 = r + "10";
            string p3 = binTohex(p2);
            if (d2.Contains("H"))
            {
                m = obtenConstante(d2);
            }
            else
            {
                int dd = Convert.ToInt32(d2);
                m = dd.ToString("X");
            }
            if (m.Length == 1)
            {
                m = m + "00";
            }
            else if (m.Length == 2)
            {
                m = m + "0";
            }
            n = a + p3 + "0" + m;
            return n;
        }
        public string inmediatoC(string d1, string d2)
        {
            string n = "";
            string m;
            char a = d1[0];
            char b = d1[1];
            string r = hexToBin(b);
            string p2 = r + "01";
            string p3 = binTohex(p2);
            if (d2.Contains("H"))
            {
                m = obtenConstante(d2);
            }
            else
            {
                int dd = Convert.ToInt32(d2);
                m = dd.ToString("X");
            }
            if (m.Length == 1)
            {
                m = m + "00";
            }
            else if (m.Length == 2)
            {
                m = m + "0";
            }
            n = a + p3 + "0" + m;
            return n;
        }
        public string buscaTabsim(string etiqueta)
        {
            string TA = "E";
            for (int i = 0; i < tabsimb.Count; i++)
            {
                if (etiqueta == tabsimb[i])
                {
                    TA = dirTabimHex[i];
                }
            }
            return TA;
        }
        public string inmediatoM(string d1, string d2, int Line)
        {
            string TA = "";
            string n = "";
            string m;
            char a = d1[0];
            char b = d1[1];
            string r = hexToBin(b);
            string p2 = r + "01";
            TA = buscaTabsim(d2);
            if (TA == "E")
            {
                string pp = binTohex(p2);
                Errorespaso2.Add(Line.ToString() + "  Error simbolo no existe");
                n = a + pp + "6" + "FFF";

            }
            else
            {
                string p3 = binTohex(p2);
                if (d2.Contains("H"))
                {
                    m = obtenConstante(d2);
                }
                else
                {
                    int dd = Convert.ToInt32(d2);
                    m = dd.ToString("X");
                }
                if (m.Length == 1)
                {
                    m = m + "00";
                }
                else if (m.Length == 2)
                {
                    m = m + "0";
                }
                n = a + p3 + "0" + m;
            }
            return n;
        }
        [RuleVersion(0)]
        public Inmediato3Context inmediato3()
        {
            string x, y;
            Inmediato3Context _localctx = new Inmediato3Context(_ctx, State);
            //Asi se identifica la linea que se esta usando
            //probando.Add("Busca linea"+_input.Lt(2).Line);
            int lineactual = _input.Lt(2).Line;

            EnterRule(_localctx, 42, RULE_inmediato3);
            try
            {
                if (paso == 1)
                {
                    mododir.Add("inmediato");
                }

                State = 191;
                _errHandler.Sync(this);
                int m = 0;
                //probando.Add("<>"+_input.Lt(1).Text+" "+_input.Lt(2).Text+" "+ _input.Lt(3).Text);
                //probando.Add("heredado"+_localctx.parent.Parent.invokingState.GetType());
                switch (Interpreter.AdaptivePredict(_input, 13, _ctx))
                {
                    case 1:
                        x = _input.Lt(1).Text;
                        y = _input.Lt(2).Text;
                        if (paso == 2)
                        {
                            if (format4 == 1)
                            {
                                format4 = 0;

                                string a = checaNemonico(x);
                                string b = obtenConstante(_input.Lt(3).Text);

                                string c = convierteObjF4(a, b);
                                probando.Add(c);
                            }
                            else
                            {
                                string d = checaNemonico(x);
                                string e = _input.Lt(3).Text;
                                string cod = inmediatoC(d, e);
                                probando.Add(cod);

                            }
                        }

                        EnterOuterAlt(_localctx, 1);
                        {
                            State = 183; codop3();
                            State = 184; Match(T__11);
                            State = 185; Match(NUM);
                        }
                        //_input.Lt(1).Text  nemonico
                        //_input.Lt(2).Text
                        //_input.Lt(3).Text



                        // probando.Add(a+b)
                        //probando.Add("---->" + _input.Lt(1).Text + "  " + _input.Lt(2).Text + " " + _input.Lt(3).Text+" "+a+b);
                        break;

                    case 2:
                        x = _input.Lt(1).Text;
                        y = _input.Lt(3).Text;
                        int ln = _input.Lt(1).Line;
                        EnterOuterAlt(_localctx, 2);
                        {
                            State = 187; codop3();
                            State = 188; Match(T__11);
                            State = 189; Match(ID);
                        }
                        if (paso == 2)
                        {
                            if (format4 == 1)
                            {
                                format4 = 0;

                                string a = checaNemonico(x);
                                //string b = obtenConstante(y);
                                string b = buscaTabsim(y);
                                string c;
                                if (b == "E")
                                {
                                    c = "Error simbolo no encontrado en TABSIM";
                                }
                                else
                                {
                                    string ab = checaNemonico(x);
                                    string ba = buscaTabsim(y);
                                    c = convierteObjF4(ab, b);
                                    c = c + "*";
                                }

                                probando.Add(c);
                            }
                            else
                            {
                                string d = checaNemonico(x);
                                string e = _input.Lt(3).Text;
                                string cod = inmediatoM(d, e, ln);
                                probando.Add(cod);

                            }
                        }
                        break;
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
                if (paso == 1)
                {
                    if (errores.Count > 0)
                    {
                        int c = 0;
                        foreach (int a in lineas)
                        {
                            if (a == re.OffendingToken.Line)
                            {
                                c = 1;
                            }
                        }
                        if (c == 0)
                        {
                            errores.Add("Error en linea :" + re.OffendingToken.Line + " , " + re.OffendingToken.Text);
                            lineas.Add(re.OffendingToken.Line);
                            contProg.Add(cp);
                            conthex.Add(cp.ToString("X"));
                            mododir.Add("----");
                        }

                    }
                    else
                    {
                        errores.Add("Error en linea :" + re.OffendingToken.Line + " , " + re.OffendingToken.Text);
                        lineas.Add(re.OffendingToken.Line);
                        contProg.Add(cp);
                        conthex.Add(cp.ToString("X"));
                        mododir.Add("----");
                    }
                }
                if (paso == 2)
                {

                    if (b == 0)
                    {
                        probando.Add("----");
                        b = re.OffendingToken.Line;
                    }
                    else
                    {
                        if (b == re.OffendingToken.Line)
                        {
                            b = 0;
                        }
                    }

                }
            }
            finally
            {
                ExitRule();
            }

            return _localctx;
        }

        public partial class Subf2aContext : ParserRuleContext
        {
            public Codop2Context codop2()
            {
                return GetRuleContext<Codop2Context>(0);
            }
            public RegContext[] reg()
            {
                return GetRuleContexts<RegContext>();
            }
            public RegContext reg(int i)
            {
                return GetRuleContext<RegContext>(i);
            }
            public Subf2aContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_subf2a; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IAnalizadorSICXEListener typedListener = listener as IAnalizadorSICXEListener;
                if (typedListener != null) typedListener.EnterSubf2a(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IAnalizadorSICXEListener typedListener = listener as IAnalizadorSICXEListener;
                if (typedListener != null) typedListener.ExitSubf2a(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IAnalizadorSICXEVisitor<TResult> typedVisitor = visitor as IAnalizadorSICXEVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitSubf2a(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public Subf2aContext subf2a()
        {
            Subf2aContext _localctx = new Subf2aContext(_ctx, State);
            EnterRule(_localctx, 44, RULE_subf2a);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 193; codop2();
                    State = 194; reg();
                    State = 195; Match(T__8);
                    State = 196; reg();
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
                if (paso == 1)
                {
                    if (errores.Count > 0)
                    {
                        int c = 0;
                        foreach (int a in lineas)
                        {
                            if (a == re.OffendingToken.Line)
                            {
                                c = 1;
                            }
                        }
                        if (c == 0)
                        {
                            errores.Add("Error en linea :" + re.OffendingToken.Line + " , " + re.OffendingToken.Text);
                            lineas.Add(re.OffendingToken.Line);
                            contProg.Add(cp);
                            conthex.Add(cp.ToString("X"));
                            mododir.Add("----");
                        }

                    }
                    else
                    {
                        errores.Add("Error en linea :" + re.OffendingToken.Line + " , " + re.OffendingToken.Text);
                        lineas.Add(re.OffendingToken.Line);
                        contProg.Add(cp);
                        conthex.Add(cp.ToString("X"));
                        mododir.Add("----");
                    }
                }
                if (paso == 2)
                {

                    if (b == 0)
                    {
                        probando.Add("----");
                        b = re.OffendingToken.Line;
                    }
                    else
                    {
                        if (b == re.OffendingToken.Line)
                        {
                            b = 0;
                        }
                    }

                }
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class Subf2bContext : ParserRuleContext
        {
            public RegContext reg()
            {
                return GetRuleContext<RegContext>(0);
            }
            public ITerminalNode NUM() { return GetToken(AnalizadorSICXEParser.NUM, 0); }
            public Subf2bContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_subf2b; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IAnalizadorSICXEListener typedListener = listener as IAnalizadorSICXEListener;
                if (typedListener != null) typedListener.EnterSubf2b(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IAnalizadorSICXEListener typedListener = listener as IAnalizadorSICXEListener;
                if (typedListener != null) typedListener.ExitSubf2b(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IAnalizadorSICXEVisitor<TResult> typedVisitor = visitor as IAnalizadorSICXEVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitSubf2b(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public Subf2bContext subf2b()
        {
            Subf2bContext _localctx = new Subf2bContext(_ctx, State);
            EnterRule(_localctx, 46, RULE_subf2b);
            try
            {
                State = 208;
                _errHandler.Sync(this);
                switch (_input.La(1))
                {
                    case T__12:
                        EnterOuterAlt(_localctx, 1);
                        {
                            State = 198; Match(T__12);
                            State = 199; reg();
                            State = 200; Match(T__8);
                            State = 201; Match(NUM);
                        }
                        break;
                    case T__13:
                        EnterOuterAlt(_localctx, 2);
                        {
                            State = 203; Match(T__13);
                            State = 204; reg();
                            State = 205; Match(T__8);
                            State = 206; Match(NUM);
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
                if (paso == 1)
                {
                    if (errores.Count > 0)
                    {
                        int c = 0;
                        foreach (int a in lineas)
                        {
                            if (a == re.OffendingToken.Line)
                            {
                                c = 1;
                            }
                        }
                        if (c == 0)
                        {
                            errores.Add("Error en linea :" + re.OffendingToken.Line + " , " + re.OffendingToken.Text);
                            lineas.Add(re.OffendingToken.Line);
                            contProg.Add(cp);
                            conthex.Add(cp.ToString("X"));
                            mododir.Add("----");
                        }

                    }
                    else
                    {
                        errores.Add("Error en linea :" + re.OffendingToken.Line + " , " + re.OffendingToken.Text);
                        lineas.Add(re.OffendingToken.Line);
                        contProg.Add(cp);
                        conthex.Add(cp.ToString("X"));
                        mododir.Add("----");
                    }
                }
                if (paso == 2)
                {

                    if (b == 0)
                    {
                        probando.Add("----");
                        b = re.OffendingToken.Line;
                    }
                    else
                    {
                        if (b == re.OffendingToken.Line)
                        {
                            b = 0;
                        }
                    }

                }
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class Subf2cContext : ParserRuleContext
        {
            public RegContext reg()
            {
                return GetRuleContext<RegContext>(0);
            }
            public Subf2cContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_subf2c; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IAnalizadorSICXEListener typedListener = listener as IAnalizadorSICXEListener;
                if (typedListener != null) typedListener.EnterSubf2c(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IAnalizadorSICXEListener typedListener = listener as IAnalizadorSICXEListener;
                if (typedListener != null) typedListener.ExitSubf2c(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IAnalizadorSICXEVisitor<TResult> typedVisitor = visitor as IAnalizadorSICXEVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitSubf2c(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public Subf2cContext subf2c()
        {
            Subf2cContext _localctx = new Subf2cContext(_ctx, State);
            EnterRule(_localctx, 48, RULE_subf2c);
            try
            {
                State = 214;
                _errHandler.Sync(this);
                switch (_input.La(1))
                {
                    case T__14:
                        EnterOuterAlt(_localctx, 1);
                        {
                            State = 210; Match(T__14);
                            State = 211; reg();
                        }
                        break;
                    case T__15:
                        EnterOuterAlt(_localctx, 2);
                        {
                            State = 212; Match(T__15);
                            State = 213; reg();
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
                if (paso == 1)
                {
                    if (errores.Count > 0)
                    {
                        int c = 0;
                        foreach (int a in lineas)
                        {
                            if (a == re.OffendingToken.Line)
                            {
                                c = 1;
                            }
                        }
                        if (c == 0)
                        {
                            errores.Add("Error en linea :" + re.OffendingToken.Line + " , " + re.OffendingToken.Text);
                            lineas.Add(re.OffendingToken.Line);
                            contProg.Add(cp);
                            conthex.Add(cp.ToString("X"));
                            mododir.Add("----");
                        }

                    }
                    else
                    {
                        errores.Add("Error en linea :" + re.OffendingToken.Line + " , " + re.OffendingToken.Text);
                        lineas.Add(re.OffendingToken.Line);
                        contProg.Add(cp);
                        conthex.Add(cp.ToString("X"));
                        mododir.Add("----");
                    }
                }
                if (paso == 2)
                {

                    if (b == 0)
                    {
                        probando.Add("----");
                        b = re.OffendingToken.Line;
                    }
                    else
                    {
                        if (b == re.OffendingToken.Line)
                        {
                            b = 0;
                        }
                    }

                }
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class Subf2dContext : ParserRuleContext
        {
            public ITerminalNode NUM() { return GetToken(AnalizadorSICXEParser.NUM, 0); }
            public Subf2dContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_subf2d; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IAnalizadorSICXEListener typedListener = listener as IAnalizadorSICXEListener;
                if (typedListener != null) typedListener.EnterSubf2d(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IAnalizadorSICXEListener typedListener = listener as IAnalizadorSICXEListener;
                if (typedListener != null) typedListener.ExitSubf2d(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IAnalizadorSICXEVisitor<TResult> typedVisitor = visitor as IAnalizadorSICXEVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitSubf2d(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public Subf2dContext subf2d()
        {
            Subf2dContext _localctx = new Subf2dContext(_ctx, State);
            EnterRule(_localctx, 50, RULE_subf2d);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 216; Match(T__16);
                    State = 217; Match(NUM);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
                if (paso == 1)
                {
                    if (errores.Count > 0)
                    {
                        int c = 0;
                        foreach (int a in lineas)
                        {
                            if (a == re.OffendingToken.Line)
                            {
                                c = 1;
                            }
                        }
                        if (c == 0)
                        {
                            errores.Add("Error en linea :" + re.OffendingToken.Line + " , " + re.OffendingToken.Text);
                            lineas.Add(re.OffendingToken.Line);
                            contProg.Add(cp);
                            conthex.Add(cp.ToString("X"));
                            mododir.Add("----");
                        }

                    }
                    else
                    {
                        errores.Add("Error en linea :" + re.OffendingToken.Line + " , " + re.OffendingToken.Text);
                        lineas.Add(re.OffendingToken.Line);
                        contProg.Add(cp);
                        conthex.Add(cp.ToString("X"));
                        mododir.Add("----");
                    }
                }
                if (paso == 2)
                {

                    if (b == 0)
                    {
                        probando.Add("----");
                        b = re.OffendingToken.Line;
                    }
                    else
                    {
                        if (b == re.OffendingToken.Line)
                        {
                            b = 0;
                        }
                    }

                }
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class Codop1Context : ParserRuleContext
        {
            public Codop1Context(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_codop1; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IAnalizadorSICXEListener typedListener = listener as IAnalizadorSICXEListener;
                if (typedListener != null) typedListener.EnterCodop1(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IAnalizadorSICXEListener typedListener = listener as IAnalizadorSICXEListener;
                if (typedListener != null) typedListener.ExitCodop1(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IAnalizadorSICXEVisitor<TResult> typedVisitor = visitor as IAnalizadorSICXEVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitCodop1(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public Codop1Context codop1()
        {
            Codop1Context _localctx = new Codop1Context(_ctx, State);
            EnterRule(_localctx, 52, RULE_codop1);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 219;
                    _la = _input.La(1);
                    if (!((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22))) != 0)))
                    {
                        _errHandler.RecoverInline(this);
                    }
                    else
                    {
                        if (_input.La(1) == TokenConstants.Eof)
                        {
                            matchedEOF = true;
                        }

                        _errHandler.ReportMatch(this);
                        Consume();
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
                if (paso == 1)
                {
                    if (errores.Count > 0)
                    {
                        int c = 0;
                        foreach (int a in lineas)
                        {
                            if (a == re.OffendingToken.Line)
                            {
                                c = 1;
                            }
                        }
                        if (c == 0)
                        {
                            errores.Add("Error en linea :" + re.OffendingToken.Line + " , " + re.OffendingToken.Text);
                            lineas.Add(re.OffendingToken.Line);
                            contProg.Add(cp);
                            conthex.Add(cp.ToString("X"));
                            mododir.Add("----");
                        }

                    }
                    else
                    {
                        errores.Add("Error en linea :" + re.OffendingToken.Line + " , " + re.OffendingToken.Text);
                        lineas.Add(re.OffendingToken.Line);
                        contProg.Add(cp);
                        conthex.Add(cp.ToString("X"));
                        mododir.Add("----");
                    }
                }
                if (paso == 2)
                {

                    if (b == 0)
                    {
                        probando.Add("----");
                        b = re.OffendingToken.Line;
                    }
                    else
                    {
                        if (b == re.OffendingToken.Line)
                        {
                            b = 0;
                        }
                    }

                }
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class Codop2Context : ParserRuleContext
        {
            public Codop2Context(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_codop2; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IAnalizadorSICXEListener typedListener = listener as IAnalizadorSICXEListener;
                if (typedListener != null) typedListener.EnterCodop2(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IAnalizadorSICXEListener typedListener = listener as IAnalizadorSICXEListener;
                if (typedListener != null) typedListener.ExitCodop2(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IAnalizadorSICXEVisitor<TResult> typedVisitor = visitor as IAnalizadorSICXEVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitCodop2(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public Codop2Context codop2()
        {
            Codop2Context _localctx = new Codop2Context(_ctx, State);
            EnterRule(_localctx, 54, RULE_codop2);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 221;
                    _la = _input.La(1);
                    if (!((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26) | (1L << T__27) | (1L << T__28))) != 0)))
                    {
                        _errHandler.RecoverInline(this);
                    }
                    else
                    {
                        if (_input.La(1) == TokenConstants.Eof)
                        {
                            matchedEOF = true;
                        }

                        _errHandler.ReportMatch(this);
                        Consume();
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
                if (paso == 1)
                {
                    if (errores.Count > 0)
                    {
                        int c = 0;
                        foreach (int a in lineas)
                        {
                            if (a == re.OffendingToken.Line)
                            {
                                c = 1;
                            }
                        }
                        if (c == 0)
                        {
                            errores.Add("Error en linea :" + re.OffendingToken.Line + " , " + re.OffendingToken.Text);
                            lineas.Add(re.OffendingToken.Line);
                            contProg.Add(cp);
                            conthex.Add(cp.ToString("X"));
                            mododir.Add("----");
                        }

                    }
                    else
                    {
                        errores.Add("Error en linea :" + re.OffendingToken.Line + " , " + re.OffendingToken.Text);
                        lineas.Add(re.OffendingToken.Line);
                        contProg.Add(cp);
                        conthex.Add(cp.ToString("X"));
                        mododir.Add("----");
                    }
                }
                if (paso == 2)
                {

                    if (b == 0)
                    {
                        probando.Add("----");
                        b = re.OffendingToken.Line;
                    }
                    else
                    {
                        if (b == re.OffendingToken.Line)
                        {
                            b = 0;
                        }
                    }

                }
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class Codop3Context : ParserRuleContext
        {
            public Codop3Context(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_codop3; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IAnalizadorSICXEListener typedListener = listener as IAnalizadorSICXEListener;
                if (typedListener != null) typedListener.EnterCodop3(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IAnalizadorSICXEListener typedListener = listener as IAnalizadorSICXEListener;
                if (typedListener != null) typedListener.ExitCodop3(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IAnalizadorSICXEVisitor<TResult> typedVisitor = visitor as IAnalizadorSICXEVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitCodop3(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public Codop3Context codop3()
        {
            Codop3Context _localctx = new Codop3Context(_ctx, State);
            EnterRule(_localctx, 56, RULE_codop3);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 223;
                    _la = _input.La(1);
                    if (!(((((_la - 30)) & ~0x3f) == 0 && ((1L << (_la - 30)) & ((1L << (T__29 - 30)) | (1L << (T__30 - 30)) | (1L << (T__31 - 30)) | (1L << (T__32 - 30)) | (1L << (T__33 - 30)) | (1L << (T__34 - 30)) | (1L << (T__35 - 30)) | (1L << (T__36 - 30)) | (1L << (T__37 - 30)) | (1L << (T__38 - 30)) | (1L << (T__39 - 30)) | (1L << (T__40 - 30)) | (1L << (T__41 - 30)) | (1L << (T__42 - 30)) | (1L << (T__43 - 30)) | (1L << (T__44 - 30)) | (1L << (T__45 - 30)) | (1L << (T__46 - 30)) | (1L << (T__47 - 30)) | (1L << (T__48 - 30)) | (1L << (T__49 - 30)) | (1L << (T__50 - 30)) | (1L << (T__51 - 30)) | (1L << (T__52 - 30)) | (1L << (T__53 - 30)) | (1L << (T__54 - 30)) | (1L << (T__55 - 30)) | (1L << (T__56 - 30)) | (1L << (T__57 - 30)) | (1L << (T__58 - 30)) | (1L << (T__59 - 30)) | (1L << (T__60 - 30)) | (1L << (T__61 - 30)) | (1L << (T__62 - 30)) | (1L << (T__63 - 30)) | (1L << (T__64 - 30)) | (1L << (T__65 - 30)) | (1L << (T__66 - 30)) | (1L << (T__67 - 30)) | (1L << (T__68 - 30)) | (1L << (T__69 - 30)))) != 0)))
                    {
                        _errHandler.RecoverInline(this);
                    }
                    else
                    {
                        if (_input.La(1) == TokenConstants.Eof)
                        {
                            matchedEOF = true;
                        }

                        _errHandler.ReportMatch(this);
                        Consume();
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
                if (paso == 1)
                {
                    if (errores.Count > 0)
                    {
                        int c = 0;
                        foreach (int a in lineas)
                        {
                            if (a == re.OffendingToken.Line)
                            {
                                c = 1;
                            }
                        }
                        if (c == 0)
                        {
                            errores.Add("Error en linea :" + re.OffendingToken.Line + " , " + re.OffendingToken.Text);
                            lineas.Add(re.OffendingToken.Line);
                            contProg.Add(cp);
                            conthex.Add(cp.ToString("X"));
                            mododir.Add("----");
                        }

                    }
                    else
                    {
                        errores.Add("Error en linea :" + re.OffendingToken.Line + " , " + re.OffendingToken.Text);
                        lineas.Add(re.OffendingToken.Line);
                        contProg.Add(cp);
                        conthex.Add(cp.ToString("X"));
                        mododir.Add("----");
                    }
                }
                if (paso == 2)
                {

                    if (b == 0)
                    {
                        probando.Add("----");
                        b = re.OffendingToken.Line;
                    }
                    else
                    {
                        if (b == re.OffendingToken.Line)
                        {
                            b = 0;
                        }
                    }

                }
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class RegContext : ParserRuleContext
        {
            public RegContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_reg; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IAnalizadorSICXEListener typedListener = listener as IAnalizadorSICXEListener;
                if (typedListener != null) typedListener.EnterReg(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IAnalizadorSICXEListener typedListener = listener as IAnalizadorSICXEListener;
                if (typedListener != null) typedListener.ExitReg(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IAnalizadorSICXEVisitor<TResult> typedVisitor = visitor as IAnalizadorSICXEVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitReg(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public RegContext reg()
        {
            RegContext _localctx = new RegContext(_ctx, State);
            EnterRule(_localctx, 58, RULE_reg);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 225;
                    _la = _input.La(1);
                    if (!(_la == T__9 || ((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & ((1L << (T__70 - 71)) | (1L << (T__71 - 71)) | (1L << (T__72 - 71)) | (1L << (T__73 - 71)) | (1L << (T__74 - 71)) | (1L << (T__75 - 71)))) != 0)))
                    {
                        _errHandler.RecoverInline(this);
                    }
                    else
                    {
                        if (_input.La(1) == TokenConstants.Eof)
                        {
                            matchedEOF = true;
                        }

                        _errHandler.ReportMatch(this);
                        Consume();
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
                if (paso == 1)
                {
                    if (errores.Count > 0)
                    {
                        int c = 0;
                        foreach (int a in lineas)
                        {
                            if (a == re.OffendingToken.Line)
                            {
                                c = 1;
                            }
                        }
                        if (c == 0)
                        {
                            errores.Add("Error en linea :" + re.OffendingToken.Line + " , " + re.OffendingToken.Text);
                            lineas.Add(re.OffendingToken.Line);
                            contProg.Add(cp);
                            conthex.Add(cp.ToString("X"));
                            mododir.Add("----");
                        }

                    }
                    else
                    {
                        errores.Add("Error en linea :" + re.OffendingToken.Line + " , " + re.OffendingToken.Text);
                        lineas.Add(re.OffendingToken.Line);
                        contProg.Add(cp);
                        conthex.Add(cp.ToString("X"));
                        mododir.Add("----");
                    }
                }
                if (paso == 2)
                {

                    if (b == 0)
                    {
                        probando.Add("----");
                        b = re.OffendingToken.Line;
                    }
                    else
                    {
                        if (b == re.OffendingToken.Line)
                        {
                            b = 0;
                        }
                    }

                }

            }

            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public static readonly string _serializedATN =
            "\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3T\xE6\x4\x2\t\x2" +
            "\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t" +
            "\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t" +
            "\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15" +
            "\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B" +
            "\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x3\x2\x3\x2" +
            "\x3\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x5\x3J\n\x3\x3" +
            "\x4\x3\x4\x5\x4N\n\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x5\x5V\n\x5" +
            "\x3\x6\x3\x6\x5\x6Z\n\x6\x3\a\x3\a\x3\a\x3\b\x3\b\x3\b\x3\b\x5\b\x63\n" +
            "\b\x3\t\x3\t\x5\tg\n\t\x3\n\x3\n\x3\n\x3\n\x3\v\x3\v\x3\v\x3\v\x3\v\x3" +
            "\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x5\v{\n\v\x3\f\x3\f\x3\r\x3" +
            "\r\x3\r\x3\xE\x3\xE\x3\xF\x3\xF\x5\xF\x86\n\xF\x3\x10\x3\x10\x3\x10\x3" +
            "\x10\x5\x10\x8C\n\x10\x3\x11\x3\x11\x3\x12\x3\x12\x3\x12\x3\x12\x5\x12" +
            "\x94\n\x12\x3\x13\x3\x13\x3\x13\x5\x13\x99\n\x13\x3\x14\x3\x14\x3\x14" +
            "\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15" +
            "\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x5\x15\xAE\n\x15\x3\x16\x3" +
            "\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x5\x16\xB8\n\x16\x3\x17" +
            "\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x5\x17\xC2\n\x17\x3" +
            "\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3" +
            "\x19\x3\x19\x3\x19\x3\x19\x3\x19\x5\x19\xD3\n\x19\x3\x1A\x3\x1A\x3\x1A" +
            "\x3\x1A\x5\x1A\xD9\n\x1A\x3\x1B\x3\x1B\x3\x1B\x3\x1C\x3\x1C\x3\x1D\x3" +
            "\x1D\x3\x1E\x3\x1E\x3\x1F\x3\x1F\x3\x1F\x2\x2\x2 \x2\x2\x4\x2\x6\x2\b" +
            "\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E" +
            "\x2 \x2\"\x2$\x2&\x2(\x2*\x2,\x2.\x2\x30\x2\x32\x2\x34\x2\x36\x2\x38\x2" +
            ":\x2<\x2\x2\b\x3\x2\x6\b\x3\x2PQ\x3\x2\x14\x19\x3\x2\x1A\x1F\x3\x2 H\x4" +
            "\x2\f\fIN\xDF\x2>\x3\x2\x2\x2\x4I\x3\x2\x2\x2\x6M\x3\x2\x2\x2\bU\x3\x2" +
            "\x2\x2\nY\x3\x2\x2\x2\f[\x3\x2\x2\x2\xE\x62\x3\x2\x2\x2\x10\x66\x3\x2" +
            "\x2\x2\x12h\x3\x2\x2\x2\x14z\x3\x2\x2\x2\x16|\x3\x2\x2\x2\x18~\x3\x2\x2" +
            "\x2\x1A\x81\x3\x2\x2\x2\x1C\x85\x3\x2\x2\x2\x1E\x8B\x3\x2\x2\x2 \x8D\x3" +
            "\x2\x2\x2\"\x93\x3\x2\x2\x2$\x98\x3\x2\x2\x2&\x9A\x3\x2\x2\x2(\xAD\x3" +
            "\x2\x2\x2*\xB7\x3\x2\x2\x2,\xC1\x3\x2\x2\x2.\xC3\x3\x2\x2\x2\x30\xD2\x3" +
            "\x2\x2\x2\x32\xD8\x3\x2\x2\x2\x34\xDA\x3\x2\x2\x2\x36\xDD\x3\x2\x2\x2" +
            "\x38\xDF\x3\x2\x2\x2:\xE1\x3\x2\x2\x2<\xE3\x3\x2\x2\x2>?\x5\x4\x3\x2?" +
            "@\x5\f\a\x2@\x41\x5\b\x5\x2\x41\x42\a\x2\x2\x3\x42\x3\x3\x2\x2\x2\x43" +
            "\x44\x5\x6\x4\x2\x44\x45\a\x3\x2\x2\x45\x46\aO\x2\x2\x46G\aS\x2\x2GJ\x3" +
            "\x2\x2\x2HJ\x5\x10\t\x2I\x43\x3\x2\x2\x2IH\x3\x2\x2\x2J\x5\x3\x2\x2\x2" +
            "KN\aR\x2\x2LN\x3\x2\x2\x2MK\x3\x2\x2\x2ML\x3\x2\x2\x2N\a\x3\x2\x2\x2O" +
            "P\a\x4\x2\x2PQ\x5\n\x6\x2QR\aS\x2\x2RV\x3\x2\x2\x2ST\a\x4\x2\x2TV\x5\n" +
            "\x6\x2UO\x3\x2\x2\x2US\x3\x2\x2\x2V\t\x3\x2\x2\x2WZ\aR\x2\x2XZ\x3\x2\x2" +
            "\x2YW\x3\x2\x2\x2YX\x3\x2\x2\x2Z\v\x3\x2\x2\x2[\\\x5\x10\t\x2\\]\x5\xE" +
            "\b\x2]\r\x3\x2\x2\x2^_\x5\x10\t\x2_`\x5\xE\b\x2`\x63\x3\x2\x2\x2\x61\x63" +
            "\x3\x2\x2\x2\x62^\x3\x2\x2\x2\x62\x61\x3\x2\x2\x2\x63\xF\x3\x2\x2\x2\x64" +
            "g\x5\x12\n\x2\x65g\x5\x14\v\x2\x66\x64\x3\x2\x2\x2\x66\x65\x3\x2\x2\x2" +
            "g\x11\x3\x2\x2\x2hi\x5\x6\x4\x2ij\x5\x1C\xF\x2jk\aS\x2\x2k\x13\x3\x2\x2" +
            "\x2lm\x5\x6\x4\x2mn\x5\x16\f\x2no\aO\x2\x2op\aS\x2\x2p{\x3\x2\x2\x2qr" +
            "\x5\x6\x4\x2rs\x5\x18\r\x2st\aS\x2\x2t{\x3\x2\x2\x2uv\x5\x6\x4\x2vw\a" +
            "\x5\x2\x2wx\x5\x1A\xE\x2xy\aS\x2\x2y{\x3\x2\x2\x2zl\x3\x2\x2\x2zq\x3\x2" +
            "\x2\x2zu\x3\x2\x2\x2{\x15\x3\x2\x2\x2|}\t\x2\x2\x2}\x17\x3\x2\x2\x2~\x7F" +
            "\a\t\x2\x2\x7F\x80\aR\x2\x2\x80\x19\x3\x2\x2\x2\x81\x82\t\x3\x2\x2\x82" +
            "\x1B\x3\x2\x2\x2\x83\x86\x5\x1E\x10\x2\x84\x86\x3\x2\x2\x2\x85\x83\x3" +
            "\x2\x2\x2\x85\x84\x3\x2\x2\x2\x86\x1D\x3\x2\x2\x2\x87\x8C\x5 \x11\x2\x88" +
            "\x8C\x5\"\x12\x2\x89\x8C\x5$\x13\x2\x8A\x8C\x5&\x14\x2\x8B\x87\x3\x2\x2" +
            "\x2\x8B\x88\x3\x2\x2\x2\x8B\x89\x3\x2\x2\x2\x8B\x8A\x3\x2\x2\x2\x8C\x1F" +
            "\x3\x2\x2\x2\x8D\x8E\x5\x36\x1C\x2\x8E!\x3\x2\x2\x2\x8F\x94\x5.\x18\x2" +
            "\x90\x94\x5\x30\x19\x2\x91\x94\x5\x32\x1A\x2\x92\x94\x5\x34\x1B\x2\x93" +
            "\x8F\x3\x2\x2\x2\x93\x90\x3\x2\x2\x2\x93\x91\x3\x2\x2\x2\x93\x92\x3\x2" +
            "\x2\x2\x94#\x3\x2\x2\x2\x95\x99\x5(\x15\x2\x96\x99\x5*\x16\x2\x97\x99" +
            "\x5,\x17\x2\x98\x95\x3\x2\x2\x2\x98\x96\x3\x2\x2\x2\x98\x97\x3\x2\x2\x2" +
            "\x99%\x3\x2\x2\x2\x9A\x9B\a\n\x2\x2\x9B\x9C\x5$\x13\x2\x9C\'\x3\x2\x2" +
            "\x2\x9D\x9E\x5:\x1E\x2\x9E\x9F\aR\x2\x2\x9F\xAE\x3\x2\x2\x2\xA0\xA1\x5" +
            ":\x1E\x2\xA1\xA2\aO\x2\x2\xA2\xAE\x3\x2\x2\x2\xA3\xA4\x5:\x1E\x2\xA4\xA5" +
            "\aO\x2\x2\xA5\xA6\a\v\x2\x2\xA6\xA7\a\f\x2\x2\xA7\xAE\x3\x2\x2\x2\xA8" +
            "\xA9\x5:\x1E\x2\xA9\xAA\aR\x2\x2\xAA\xAB\a\v\x2\x2\xAB\xAC\a\f\x2\x2\xAC" +
            "\xAE\x3\x2\x2\x2\xAD\x9D\x3\x2\x2\x2\xAD\xA0\x3\x2\x2\x2\xAD\xA3\x3\x2" +
            "\x2\x2\xAD\xA8\x3\x2\x2\x2\xAE)\x3\x2\x2\x2\xAF\xB0\x5:\x1E\x2\xB0\xB1" +
            "\a\r\x2\x2\xB1\xB2\aO\x2\x2\xB2\xB8\x3\x2\x2\x2\xB3\xB4\x5:\x1E\x2\xB4" +
            "\xB5\a\r\x2\x2\xB5\xB6\aR\x2\x2\xB6\xB8\x3\x2\x2\x2\xB7\xAF\x3\x2\x2\x2" +
            "\xB7\xB3\x3\x2\x2\x2\xB8+\x3\x2\x2\x2\xB9\xBA\x5:\x1E\x2\xBA\xBB\a\xE" +
            "\x2\x2\xBB\xBC\aO\x2\x2\xBC\xC2\x3\x2\x2\x2\xBD\xBE\x5:\x1E\x2\xBE\xBF" +
            "\a\xE\x2\x2\xBF\xC0\aR\x2\x2\xC0\xC2\x3\x2\x2\x2\xC1\xB9\x3\x2\x2\x2\xC1" +
            "\xBD\x3\x2\x2\x2\xC2-\x3\x2\x2\x2\xC3\xC4\x5\x38\x1D\x2\xC4\xC5\x5<\x1F" +
            "\x2\xC5\xC6\a\v\x2\x2\xC6\xC7\x5<\x1F\x2\xC7/\x3\x2\x2\x2\xC8\xC9\a\xF" +
            "\x2\x2\xC9\xCA\x5<\x1F\x2\xCA\xCB\a\v\x2\x2\xCB\xCC\aO\x2\x2\xCC\xD3\x3" +
            "\x2\x2\x2\xCD\xCE\a\x10\x2\x2\xCE\xCF\x5<\x1F\x2\xCF\xD0\a\v\x2\x2\xD0" +
            "\xD1\aO\x2\x2\xD1\xD3\x3\x2\x2\x2\xD2\xC8\x3\x2\x2\x2\xD2\xCD\x3\x2\x2" +
            "\x2\xD3\x31\x3\x2\x2\x2\xD4\xD5\a\x11\x2\x2\xD5\xD9\x5<\x1F\x2\xD6\xD7" +
            "\a\x12\x2\x2\xD7\xD9\x5<\x1F\x2\xD8\xD4\x3\x2\x2\x2\xD8\xD6\x3\x2\x2\x2" +
            "\xD9\x33\x3\x2\x2\x2\xDA\xDB\a\x13\x2\x2\xDB\xDC\aO\x2\x2\xDC\x35\x3\x2" +
            "\x2\x2\xDD\xDE\t\x4\x2\x2\xDE\x37\x3\x2\x2\x2\xDF\xE0\t\x5\x2\x2\xE0\x39" +
            "\x3\x2\x2\x2\xE1\xE2\t\x6\x2\x2\xE2;\x3\x2\x2\x2\xE3\xE4\t\a\x2\x2\xE4" +
            "=\x3\x2\x2\x2\x12IMUY\x62\x66z\x85\x8B\x93\x98\xAD\xB7\xC1\xD2\xD8";
        public static readonly ATN _ATN =
            new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
    }
} // namespace AnalizadorSICXE
